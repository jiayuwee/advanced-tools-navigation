name: 🔨 Build & Quality Verification

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: 'v2'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: 📋 Code Quality Check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Install dependencies
        run: |
          echo "📦 安装依赖..."
          # 清理缓存以避免平台兼容性问题
          npm cache clean --force || true
          
          # 尝试标准安装
          if npm ci --prefer-offline --no-audit --ignore-scripts; then
            echo "✅ 标准安装成功"
          else
            echo "⚠️ 标准安装失败，尝试替代方案..."
            
            # 删除 node_modules 和 package-lock.json
            rm -rf node_modules package-lock.json
            
            # 重新生成 package-lock.json 并安装
            npm install --prefer-offline --no-audit --ignore-scripts
            echo "✅ 替代安装方案完成"
          fi
          
          echo "📋 已安装的包数量: $(npm list --depth=0 2>/dev/null | grep -c '├\|└' || echo '未知')"

      - name: 🔍 ESLint Check
        run: |
          echo "🔍 运行 ESLint 检查..."
          npm run lint
          echo "✅ ESLint 检查通过"

      - name: 🔧 TypeScript Type Check
        run: |
          echo "🔧 运行 TypeScript 类型检查..."
          npm run type-check
          echo "✅ TypeScript 类型检查通过"

  # 测试执行
  test:
    runs-on: ubuntu-latest
    name: 🧪 Run Tests
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Install dependencies
        run: |
          echo "📦 安装依赖..."
          # 清理缓存以避免平台兼容性问题
          npm cache clean --force || true
          
          # 尝试标准安装
          if npm ci --prefer-offline --no-audit --ignore-scripts; then
            echo "✅ 标准安装成功"
          else
            echo "⚠️ 标准安装失败，尝试替代方案..."
            
            # 删除 node_modules 和 package-lock.json
            rm -rf node_modules package-lock.json
            
            # 重新生成 package-lock.json 并安装
            npm install --prefer-offline --no-audit --ignore-scripts
            echo "✅ 替代安装方案完成"
          fi
          
          echo "📋 已安装的包数量: $(npm list --depth=0 2>/dev/null | grep -c '├\|└' || echo '未知')"

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 运行单元测试..."
          npm run test:run
          echo "✅ 单元测试通过"

      - name: 📊 Generate test coverage
        run: |
          echo "📊 生成测试覆盖率报告..."
          npm run test:coverage
          echo "✅ 测试覆盖率报告生成完成"

  # 构建验证
  build-verification:
    runs-on: ubuntu-latest
    name: 🔨 Build Verification
    needs: [code-quality, test]
    strategy:
      matrix:
        node-version: ['20.x']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Install dependencies
        run: |
          echo "📦 安装依赖 (Node.js ${{ matrix.node-version }})..."
          # 清理缓存以避免平台兼容性问题
          npm cache clean --force || true
          
          # 尝试标准安装
          if npm ci --prefer-offline --no-audit --ignore-scripts; then
            echo "✅ 标准安装成功"
          else
            echo "⚠️ 标准安装失败，尝试替代方案..."
            
            # 删除 node_modules 和 package-lock.json
            rm -rf node_modules package-lock.json
            
            # 重新生成 package-lock.json 并安装
            npm install --prefer-offline --no-audit --ignore-scripts
            echo "✅ 替代安装方案完成"
          fi
          
          echo "📋 已安装的包数量: $(npm list --depth=0 2>/dev/null | grep -c '├\|└' || echo '未知')"

      - name: 🔨 Build project
        run: |
          echo "🔨 开始构建项目..."
          echo "Node.js 版本: $(node --version)"
          echo "NPM 版本: $(npm --version)"
          npm run build
          echo "✅ 构建完成"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: 🔍 Verify build output
        run: |
          echo "🔍 验证构建输出..."
          if [ ! -d "dist" ]; then
            echo "❌ dist 目录不存在"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html 不存在"
            exit 1
          fi
          
          echo "✅ 构建成功验证"
          echo "📊 构建统计:"
          du -sh dist/
          echo "📁 主要文件:"
          find dist -name "*.js" -o -name "*.css" -o -name "*.html" | head -10 | xargs ls -lh

      - name: 📤 Upload build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # 安全性检查
  security-check:
    runs-on: ubuntu-latest
    name: 🔒 Security Check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 🔒 Security audit
        run: |
          echo "🔒 运行安全审计..."
          npm audit --audit-level moderate
          echo "✅ 安全审计完成"

  # 部署通知
  deployment-notification:
    runs-on: ubuntu-latest
    name: 🚀 Deployment Notification
    needs: [build-verification, security-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🚀 Deployment notification
        run: |
          echo "🚀 代码已推送到 main 分支"
          echo "📦 Netlify 将自动检测并部署此次构建" 
          echo "⏱️ 部署通常需要 1-3 分钟"
          echo "🌐 网站地址: https://ramusi.cn"
          echo "✅ 所有检查通过，等待 Netlify 部署..."
          echo "📊 构建摘要:"
          echo "  - ✅ 代码质量检查通过"
          echo "  - ✅ 测试执行通过"
          echo "  - ✅ 构建验证通过"
          echo "  - ✅ 安全检查通过"
