name: Deploy to Supabase

on:
  push:
    branches: [main]
    paths:
      - 'supabase/**'
      - '.github/workflows/supabase-deploy.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '强制部署（忽略检查）'
        required: false
        default: false
        type: boolean
      environment:
        description: '部署环境'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    name: Check Required Secrets
    outputs:
      has-supabase-secrets: ${{ steps.check.outputs.has-secrets }}
      has-frontend-secrets: ${{ steps.check.outputs.has-frontend-secrets }}
    steps:
      - name: Check if Supabase secrets are available
        id: check
        run: |
          echo "🔍 检查必需的 secrets..."

          # 检查 Supabase 后端 secrets
          HAS_TOKEN="${{ secrets.SUPABASE_ACCESS_TOKEN != '' }}"
          HAS_PROJECT="${{ secrets.SUPABASE_PROJECT_REF != '' }}"

          # 检查前端 secrets
          HAS_URL="${{ secrets.VITE_SUPABASE_URL != '' }}"
          HAS_ANON_KEY="${{ secrets.VITE_SUPABASE_ANON_KEY != '' }}"

          echo "📊 Secrets 状态检查:"
          echo "- SUPABASE_ACCESS_TOKEN: $([ "$HAS_TOKEN" = "true" ] && echo "✅" || echo "❌")"
          echo "- SUPABASE_PROJECT_REF: $([ "$HAS_PROJECT" = "true" ] && echo "✅" || echo "❌")"
          echo "- VITE_SUPABASE_URL: $([ "$HAS_URL" = "true" ] && echo "✅" || echo "❌")"
          echo "- VITE_SUPABASE_ANON_KEY: $([ "$HAS_ANON_KEY" = "true" ] && echo "✅" || echo "❌")"

          # 设置输出
          if [ "$HAS_TOKEN" = "true" ] && [ "$HAS_PROJECT" = "true" ]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "✅ Supabase 后端 secrets 已配置"
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "❌ Supabase 后端 secrets 未完整配置"
          fi

          if [ "$HAS_URL" = "true" ] && [ "$HAS_ANON_KEY" = "true" ]; then
            echo "has-frontend-secrets=true" >> $GITHUB_OUTPUT
            echo "✅ 前端 secrets 已配置"
          else
            echo "has-frontend-secrets=false" >> $GITHUB_OUTPUT
            echo "❌ 前端 secrets 未完整配置"
          fi

          # 如果是强制部署，跳过检查
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "⚠️  强制部署模式，跳过 secrets 检查"
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "has-frontend-secrets=true" >> $GITHUB_OUTPUT
          fi

  deploy-database:
    runs-on: ubuntu-latest
    name: Deploy Database Changes
    needs: check-secrets
    if: needs.check-secrets.outputs.has-supabase-secrets == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase CLI
        run: |
          echo "🔧 验证 Supabase CLI 安装..."
          supabase --version
          echo "✅ Supabase CLI 已就绪"

      - name: Link to Supabase project
        run: |
          echo "🔗 链接到 Supabase 项目..."
          echo "项目引用: $PROJECT_REF"

          if supabase link --project-ref "$PROJECT_REF"; then
            echo "✅ 项目链接成功"
          else
            echo "❌ 项目链接失败"
            echo "请检查 SUPABASE_PROJECT_REF 是否正确"
            exit 1
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Check migration files
        run: |
          echo "📋 检查迁移文件..."
          if [ -d "supabase/migrations" ]; then
            echo "迁移文件列表:"
            ls -la supabase/migrations/
            echo "✅ 迁移文件目录存在"
          else
            echo "❌ 迁移文件目录不存在"
            exit 1
          fi

      - name: Run database migrations
        run: |
          echo "🚀 运行数据库迁移..."

          if supabase db push; then
            echo "✅ 数据库迁移完成"
          else
            echo "❌ 数据库迁移失败"
            echo "请检查迁移文件语法和权限"
            exit 1
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy Edge Functions (if any)
        run: |
          if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions 2>/dev/null)" ]; then
            echo "📦 部署 Edge Functions..."
            if supabase functions deploy; then
              echo "✅ Edge Functions 部署成功"
            else
              echo "⚠️  Edge Functions 部署失败，但继续执行"
            fi
          else
            echo "ℹ️  没有 Edge Functions 需要部署"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify deployment
        run: |
          echo "🧪 验证部署状态..."

          # 检查项目状态
          if supabase projects list | grep -q "$PROJECT_REF"; then
            echo "✅ 项目状态正常"
          else
            echo "⚠️  无法验证项目状态"
          fi

          echo ""
          echo "🎉 数据库部署完成！"
          echo "🔗 项目控制台: https://supabase.com/dashboard/project/$PROJECT_REF"
          echo "📊 数据库管理: https://supabase.com/dashboard/project/$PROJECT_REF/editor"
          echo "🔐 认证设置: https://supabase.com/dashboard/project/$PROJECT_REF/auth/users"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Netlify
    needs: [check-secrets, deploy-database]
    if: needs.check-secrets.outputs.has-frontend-secrets == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "📦 安装项目依赖..."
          npm ci
          echo "✅ 依赖安装完成"

      - name: Check frontend environment variables
        run: |
          echo "🔍 检查前端环境变量..."

          if [ -n "$VITE_SUPABASE_URL" ] && [ -n "$VITE_SUPABASE_ANON_KEY" ]; then
            echo "✅ 前端环境变量已配置"
            echo "- VITE_SUPABASE_URL: ${VITE_SUPABASE_URL:0:30}..."
            echo "- VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY:0:30}..."
          else
            echo "❌ 前端环境变量缺失"
            echo "请确保 VITE_SUPABASE_URL 和 VITE_SUPABASE_ANON_KEY 已正确配置"
            exit 1
          fi
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Run linting
        run: |
          echo "🔍 运行代码检查..."
          if npm run lint; then
            echo "✅ 代码检查通过"
          else
            echo "⚠️  代码检查发现问题，但继续构建"
          fi

      - name: Run type checking
        run: |
          echo "🔍 运行类型检查..."
          if npm run type-check; then
            echo "✅ 类型检查通过"
          else
            echo "⚠️  类型检查发现问题，但继续构建"
          fi

      - name: Build project
        run: |
          echo "🔨 构建生产版本..."

          if npm run build; then
            echo "✅ 构建成功"
            echo "📁 构建输出:"
            ls -la dist/
          else
            echo "❌ 构建失败"
            exit 1
          fi
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Verify build output
        run: |
          echo "🧪 验证构建输出..."

          if [ ! -d "dist" ]; then
            echo "❌ dist 目录不存在"
            exit 1
          fi

          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html 文件不存在"
            exit 1
          fi

          echo "✅ 构建输出验证通过"
          echo "📊 构建统计:"
          echo "- 文件总数: $(find dist -type f | wc -l)"
          echo "- 总大小: $(du -sh dist | cut -f1)"

      - name: Deploy to Netlify
        run: |
          echo "🚀 准备部署到 Netlify..."
          echo "🌐 目标站点: https://ramusi.cn"
          echo "📦 构建产物已准备就绪"
          echo "⏱️  Netlify 将自动检测并部署此次构建"
          echo ""
          echo "🔗 有用的链接:"
          echo "- 站点管理: https://app.netlify.com/sites/spiffy-torrone-5454e1/overview"
          echo "- 部署历史: https://app.netlify.com/sites/spiffy-torrone-5454e1/deploys"
          echo "- 域名设置: https://app.netlify.com/sites/spiffy-torrone-5454e1/settings/domain"

  post-deployment:
    runs-on: ubuntu-latest
    name: Post-deployment Verification
    needs: [deploy-database, deploy-frontend]
    if: always() && (needs.deploy-database.result == 'success' || needs.deploy-frontend.result == 'success')

    steps:
      - name: Deployment Summary
        run: |
          echo "📋 部署总结报告"
          echo "=================="

          DB_STATUS="${{ needs.deploy-database.result }}"
          FRONTEND_STATUS="${{ needs.deploy-frontend.result }}"

          echo "🗄️  数据库部署: $([ "$DB_STATUS" = "success" ] && echo "✅ 成功" || echo "❌ 失败")"
          echo "🌐 前端部署: $([ "$FRONTEND_STATUS" = "success" ] && echo "✅ 成功" || echo "❌ 失败")"

          if [ "$DB_STATUS" = "success" ] && [ "$FRONTEND_STATUS" = "success" ]; then
            echo ""
            echo "🎉 完整部署成功！"
            echo "🔗 应用地址: https://ramusi.cn"
            echo "📊 管理后台: https://supabase.com/dashboard/project/${{ secrets.SUPABASE_PROJECT_REF }}"
          elif [ "$DB_STATUS" = "success" ]; then
            echo ""
            echo "⚠️  数据库部署成功，前端部署失败"
            echo "请检查前端构建日志"
          elif [ "$FRONTEND_STATUS" = "success" ]; then
            echo ""
            echo "⚠️  前端部署成功，数据库部署失败"
            echo "请检查数据库迁移日志"
          else
            echo ""
            echo "❌ 部署失败"
            echo "请检查相关日志并重试"
          fi

      - name: Wait for site to be ready
        if: needs.deploy-frontend.result == 'success'
        run: |
          echo "⏱️  等待站点就绪..."
          sleep 30

      - name: Test site availability
        if: needs.deploy-frontend.result == 'success'
        run: |
          echo "🧪 测试站点可用性..."

          if curl -f -s https://ramusi.cn > /dev/null; then
            echo "✅ 主站点可访问"
          else
            echo "⚠️  主站点暂时无法访问，可能需要更多时间"
          fi

# 重要说明：
# 1. GitHub Actions 可能显示 "Context access might be invalid" 警告
#    这是正常的！GitHub 无法在静态分析时验证 secrets 是否存在
#    这些警告不会影响工作流的实际运行
#
# 2. 需要在 GitHub 仓库设置中添加以下 Secrets：
#    - SUPABASE_ACCESS_TOKEN: Supabase 访问令牌
#    - SUPABASE_PROJECT_REF: Supabase 项目引用 ID
#    - VITE_SUPABASE_URL: Supabase 项目 URL
#    - VITE_SUPABASE_ANON_KEY: Supabase 匿名密钥
#
# 3. 配置指南请参考：docs/GITHUB_SECRETS_SETUP.md
#
# 4. 手动触发部署：
#    - 访问 GitHub 仓库的 Actions 选项卡
#    - 选择 "Deploy to Supabase" 工作流
#    - 点击 "Run workflow" 按钮
#    - 可选择强制部署或指定环境
