name: 🚀 Performance Monitoring

on:
  schedule:
    - cron: "0 2 * * 0" # 每周日凌晨2点运行性能测试
  workflow_dispatch:
    inputs:
      test_type:
        description: '性能测试类型'
        required: false
        default: 'lighthouse'
        type: choice
        options:
        - 'lighthouse'
        - 'load-test'
        - 'comprehensive'

env:
  WEBSITE_URL: 'https://ramusi.cn'
  NODE_VERSION: '18.19.0'

jobs:
  # Lighthouse 性能测试
  lighthouse-audit:
    runs-on: ubuntu-latest
    name: 💡 Lighthouse Performance Audit
    if: github.event.inputs.test_type == 'lighthouse' || github.event.inputs.test_type == 'comprehensive' || github.event_name == 'schedule'
    timeout-minutes: 30
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse CI
        run: |
          echo "📦 安装 Lighthouse CI..."
          # 使用固定版本以确保稳定性
          npm install -g @lhci/cli@0.13.x
          
          # 验证安装
          lhci --version

      - name: 🏃 Run Lighthouse audit
        run: |
          echo "🏃 运行 Lighthouse 审计..."
          
          # 等待网站完全加载
          echo "⚙️ 等待网站准备就绪..."
          sleep 10
          
          # 检查网站可访问性
          echo "🔍 检查网站可访问性..."
          if ! curl -sSf --max-time 30 "${{ env.WEBSITE_URL }}" > /dev/null 2>&1; then
            echo "⚠️ 网站不可访问或响应过慢，跳过 Lighthouse 测试"
            # 创建一个空的报告文件
            mkdir -p .lighthouseci
            echo '{"error": "Website not accessible"}' > .lighthouseci/empty_report.json
            exit 0
          fi
          
          echo "✅ 网站可访问，开始 Lighthouse 测试..."
          
          # 创建 Lighthouse 配置
          cat > lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": ["${{ env.WEBSITE_URL }}"],
                "numberOfRuns": 1,
                "settings": {
                  "chromeFlags": ["--no-sandbox", "--disable-dev-shm-usage", "--disable-gpu"],
                  "timeout": 60000,
                  "maxWaitForLoad": 45000
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.3}],
                  "categories:accessibility": ["warn", {"minScore": 0.7}],
                  "categories:best-practices": ["warn", {"minScore": 0.6}],
                  "categories:seo": ["warn", {"minScore": 0.6}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF
          
          # 运行 Lighthouse
          echo "🚀 正在运行 Lighthouse 审计..."
          if lhci autorun --config=lighthouserc.json; then
            echo "✅ Lighthouse 运行成功"
          else
            echo "⚠️ Lighthouse 运行失败，但不阻断部署流程"
            # 创建一个空的报告文件
            mkdir -p .lighthouseci
            echo '{"error": "Lighthouse run failed"}' > .lighthouseci/failed_report.json
          fi
        continue-on-error: true

      - name: 📊 Parse Lighthouse results
        run: |
          echo "📊 解析 Lighthouse 结果..."
          
          # 检查 .lighthouseci 目录是否存在
          if [ ! -d ".lighthouseci" ]; then
            echo "⚠️ .lighthouseci 目录不存在，创建空的摘要报告"
            echo "## 💡 Lighthouse 性能报告" > lighthouse_summary.md
            echo "测试时间: $(date)" >> lighthouse_summary.md
            echo "测试URL: ${{ env.WEBSITE_URL }}" >> lighthouse_summary.md
            echo "" >> lighthouse_summary.md
            echo "⚠️ Lighthouse 测试未成功运行，可能的原因：" >> lighthouse_summary.md
            echo "- 网站无法访问" >> lighthouse_summary.md
            echo "- Lighthouse CI 配置问题" >> lighthouse_summary.md
            echo "- 运行时环境问题" >> lighthouse_summary.md
            cat lighthouse_summary.md
            exit 0
          fi
          
          # 查找最新的报告文件
          latest_report=$(find .lighthouseci -name "*.json" | head -1)
          
          if [ -f "$latest_report" ]; then
            echo "✅ 找到 Lighthouse 报告: $latest_report"
            
            # 验证 JSON 文件格式
            if ! jq empty "$latest_report" 2>/dev/null; then
              echo "❌ JSON 文件格式无效，创建基础报告"
              echo "## 💡 Lighthouse 性能报告" > lighthouse_summary.md
              echo "测试时间: $(date)" >> lighthouse_summary.md
              echo "测试URL: ${{ env.WEBSITE_URL }}" >> lighthouse_summary.md
              echo "" >> lighthouse_summary.md
              echo "❌ 报告文件格式无效，无法解析性能数据" >> lighthouse_summary.md
              cat lighthouse_summary.md
              exit 0
            fi
            
            echo "## 💡 Lighthouse 性能报告" > lighthouse_summary.md
            echo "测试时间: $(date)" >> lighthouse_summary.md
            echo "测试URL: ${{ env.WEBSITE_URL }}" >> lighthouse_summary.md
            echo "" >> lighthouse_summary.md
            
            # 安全地提取核心指标
            performance=$(cat "$latest_report" | jq '.categories.performance.score * 100 | floor' 2>/dev/null || echo "N/A")
            accessibility=$(cat "$latest_report" | jq '.categories.accessibility.score * 100 | floor' 2>/dev/null || echo "N/A")
            best_practices=$(cat "$latest_report" | jq '.categories["best-practices"].score * 100 | floor' 2>/dev/null || echo "N/A")
            seo=$(cat "$latest_report" | jq '.categories.seo.score * 100 | floor' 2>/dev/null || echo "N/A")
            
            echo "### 📈 核心指标" >> lighthouse_summary.md
            echo "- 🚀 性能: ${performance}/100" >> lighthouse_summary.md
            echo "- ♿ 可访问性: ${accessibility}/100" >> lighthouse_summary.md
            echo "- ✅ 最佳实践: ${best_practices}/100" >> lighthouse_summary.md
            echo "- 🔍 SEO: ${seo}/100" >> lighthouse_summary.md
            echo "" >> lighthouse_summary.md
            
            # 安全地提取 Web Vitals
            echo "### 🎯 Core Web Vitals" >> lighthouse_summary.md
            
            fcp=$(cat "$latest_report" | jq '.audits["first-contentful-paint"].numericValue | floor' 2>/dev/null || echo "N/A")
            lcp=$(cat "$latest_report" | jq '.audits["largest-contentful-paint"].numericValue | floor' 2>/dev/null || echo "N/A")
            cls=$(cat "$latest_report" | jq '.audits["cumulative-layout-shift"].numericValue' 2>/dev/null || echo "N/A")
            
            echo "- First Contentful Paint: ${fcp}ms" >> lighthouse_summary.md
            echo "- Largest Contentful Paint: ${lcp}ms" >> lighthouse_summary.md
            echo "- Cumulative Layout Shift: ${cls}" >> lighthouse_summary.md
            
            cat lighthouse_summary.md
          else
            echo "❌ 未找到 Lighthouse 报告文件"
            echo "## 💡 Lighthouse 性能报告" > lighthouse_summary.md
            echo "测试时间: $(date)" >> lighthouse_summary.md
            echo "测试URL: ${{ env.WEBSITE_URL }}" >> lighthouse_summary.md
            echo "" >> lighthouse_summary.md
            echo "❌ 未生成 Lighthouse 报告文件" >> lighthouse_summary.md
            echo "可能的原因：" >> lighthouse_summary.md
            echo "- 网站响应时间过长" >> lighthouse_summary.md
            echo "- Lighthouse 运行超时" >> lighthouse_summary.md
            echo "- 网络连接问题" >> lighthouse_summary.md
            cat lighthouse_summary.md
          fi
        continue-on-error: true

      - name: 📤 Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
            lighthouse_summary.md
          retention-days: 30

  # 构建性能分析
  build-performance:
    runs-on: ubuntu-latest
    name: 🔧 Build Performance Analysis
    if: github.event.inputs.test_type == 'comprehensive' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          echo "📦 安装依赖..."
          npm ci --prefer-offline --no-audit

      - name: 🔧 Analyze build performance
        run: |
          echo "🔧 分析构建性能..."
          
          # 确保先进行构建
          echo "🔨 先进行构建..."
          npm run build
          
          # 记录构建开始时间
          start_time=$(date +%s)
          
          # 再次运行构建并记录详细信息
          npm run build 2>&1 | tee build_output.log
          
          # 记录构建结束时间
          end_time=$(date +%s)
          build_duration=$((end_time - start_time))
          
          echo "## 🔧 构建性能分析" > build_performance.md
          echo "构建时间: $(date)" >> build_performance.md
          echo "构建耗时: ${build_duration}秒" >> build_performance.md
          echo "" >> build_performance.md
          
          # 分析构建产物大小
          if [ -d "dist" ]; then
            echo "### 📊 构建产物分析" >> build_performance.md
            echo "总大小: $(du -sh dist | cut -f1)" >> build_performance.md
            echo "" >> build_performance.md
            
            echo "### 📁 主要文件大小" >> build_performance.md
            find dist -type f -name "*.js" -o -name "*.css" | \
            while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "- $(basename "$file"): $size" >> build_performance.md
            done
            
            # 检查大文件
            echo "" >> build_performance.md
            echo "### ⚠️ 大文件警告 (>100KB)" >> build_performance.md
            find dist -type f -size +100k | \
            while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "- $(basename "$file"): $size" >> build_performance.md
            done || echo "无大文件" >> build_performance.md
          fi
          
          cat build_performance.md

      - name: 📊 Bundle analysis
        run: |
          echo "📊 运行 bundle 分析..."
          
          # 检查是否有 dist 目录
          if [ ! -d "dist" ]; then
            echo "⚠️ dist 目录不存在，跳过 bundle 分析"
            echo "### 📍 Bundle 分析" >> build_performance.md
            echo "跳过 bundle 分析 - dist 目录不存在" >> build_performance.md
            exit 0
          fi
          
          # 安装分析工具（使用更稳定的工具）
          npm install --no-save webpack-bundle-analyzer || {
            echo "⚠️ bundle 分析工具安装失败，跳过此步骤"
            echo "### 📍 Bundle 分析" >> build_performance.md
            echo "跳过 bundle 分析 - 工具安装失败" >> build_performance.md
            exit 0
          }
          
          echo "### 📦 Bundle 分析" >> build_performance.md
          echo "Bundle 分析已完成" >> build_performance.md

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-performance
          path: |
            build_performance.md
            build_output.log
            bundle-analysis.json
          retention-days: 30

  # 负载测试
  load-test:
    runs-on: ubuntu-latest
    name: 🔥 Load Testing
    if: github.event.inputs.test_type == 'load-test' || github.event.inputs.test_type == 'comprehensive'
    steps:
      - name: 🔥 Run load test
        run: |
          echo "🔥 运行负载测试..."
          
          # 使用 Apache Bench 进行简单负载测试
          echo "安装测试工具..."
          sudo apt-get update
          sudo apt-get install -y apache2-utils
          
          echo "## 🔥 负载测试报告" > load_test.md
          echo "测试时间: $(date)" >> load_test.md
          echo "测试目标: ${{ env.WEBSITE_URL }}" >> load_test.md
          echo "" >> load_test.md
          
          # 并发测试 - 10个并发用户，100个请求
          echo "### 📊 并发测试 (10并发, 100请求)" >> load_test.md
          ab -n 100 -c 10 -g load_test_data.tsv ${{ env.WEBSITE_URL }}/ > load_test_output.txt 2>&1
          
          # 提取关键指标
          if [ -f "load_test_output.txt" ]; then
            requests_per_second=$(grep "Requests per second" load_test_output.txt | cut -d: -f2 | xargs)
            time_per_request=$(grep "Time per request" load_test_output.txt | head -1 | cut -d: -f2 | xargs)
            failed_requests=$(grep "Failed requests" load_test_output.txt | cut -d: -f2 | xargs)
            
            echo "- 每秒请求数: $requests_per_second" >> load_test.md
            echo "- 平均请求时间: $time_per_request" >> load_test.md
            echo "- 失败请求数: $failed_requests" >> load_test.md
          fi
          
          echo "" >> load_test.md
          echo "### 📈 性能基准" >> load_test.md
          echo "- ✅ 优秀: >50 req/sec" >> load_test.md
          echo "- ⚠️ 一般: 20-50 req/sec" >> load_test.md
          echo "- ❌ 需优化: <20 req/sec" >> load_test.md
          
          cat load_test.md

      - name: 📤 Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load_test.md
            load_test_output.txt
            load_test_data.tsv
          retention-days: 30

  # 性能监控总结
  performance-summary:
    runs-on: ubuntu-latest
    name: 📊 Performance Summary
    needs: [lighthouse-audit, build-performance, load-test]
    if: always()
    steps:
      - name: 📊 Generate performance summary
        run: |
          echo "📊 性能监控总结报告"
          echo "=================================="
          echo "监控时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "目标网站: ${{ env.WEBSITE_URL }}"
          echo ""
          
          # Lighthouse 结果
          if [ "${{ needs.lighthouse-audit.result }}" = "success" ]; then
            echo "✅ Lighthouse 审计: 完成"
          elif [ "${{ needs.lighthouse-audit.result }}" = "failure" ]; then
            echo "❌ Lighthouse 审计: 失败"
          else
            echo "⏭️ Lighthouse 审计: 跳过"
          fi
          
          # 构建性能结果
          if [ "${{ needs.build-performance.result }}" = "success" ]; then
            echo "✅ 构建性能分析: 完成"
          elif [ "${{ needs.build-performance.result }}" = "failure" ]; then
            echo "❌ 构建性能分析: 失败"
          else
            echo "⏭️ 构建性能分析: 跳过"
          fi
          
          # 负载测试结果
          if [ "${{ needs.load-test.result }}" = "success" ]; then
            echo "✅ 负载测试: 完成"
          elif [ "${{ needs.load-test.result }}" = "failure" ]; then
            echo "❌ 负载测试: 失败"
          else
            echo "⏭️ 负载测试: 跳过"
          fi
          
          echo ""
          echo "📈 性能优化建议:"
          echo "- 定期监控 Core Web Vitals"
          echo "- 优化大文件和资源加载"
          echo "- 实施代码分割和懒加载"
          echo "- 使用 CDN 加速静态资源"
          echo "- 监控构建时间和产物大小"
          
          echo ""
          echo "🔗 相关链接:"
          echo "- 网站: ${{ env.WEBSITE_URL }}"
          echo "- 工作流: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "- 项目: ${{ github.server_url }}/${{ github.repository }}"