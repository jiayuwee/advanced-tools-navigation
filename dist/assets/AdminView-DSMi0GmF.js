import{e as r,s as t,p as a,W as e,U as s,q as o,L as i,c as n,_ as c}from"./index-DFN97R6u.js";import{S as l}from"./shopping-bag-Ba-vhe5f.js";import{F as u}from"./file-text-FfSS7JCx.js";import{H as d}from"./hard-drive-YQZFv_op.js";import{H as h}from"./home-nyyf2Nc7.js";import{d as w,o as f,m,q as v,y as p,M as _,E as g,u as y,L as U,A as E}from"./vendor-dtMHlISa.js";
/**
 * @license lucide-vue-next v0.294.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const S=r("BarChart3Icon",[["path",{d:"M3 3v18h18",key:"1s2lah"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]]);class UserService{static async getCurrentUser(){try{const{data:{user:r}}=await t.auth.getUser();if(!r)return null;const{data:a,error:e}=await t.from("user_profiles").select("*").eq("id",r.id).single();if(e){if("PGRST116"===e.code)return this.createUserProfile(r.id,r.email);throw e}return this.transformUser(a)}catch(r){return console.error("获取用户信息失败:",r),null}}static async getUserProfile(r){try{const{data:a,error:e}=await t.from("user_profiles").select("*").eq("id",r).single();if(e)throw e;return a?this.transformUser(a):null}catch(a){return console.error("获取用户资料失败:",a),null}}static async updateProfile(r,a){try{const e={full_name:a.full_name,username:a.username,bio:a.bio,website:a.website,location:a.location,updated_at:(new Date).toISOString()};if(a.avatar){const t=await this.uploadAvatar(r,a.avatar);e.avatar_url=t}const{data:s,error:o}=await t.from("user_profiles").update(e).eq("id",r).select("*").single();if(o)throw o;if(!s)throw new Error("更新用户资料失败");return this.transformUser(s)}catch(e){throw console.error("更新用户资料失败:",e),new Error("更新用户资料失败")}}static async createUserProfile(r,a){try{const e={id:r,email:a,role:"user",is_active:!0,email_verified:!1},{data:s,error:o}=await t.from("user_profiles").insert(e).select("*").single();if(o)throw o;if(!s)throw new Error("创建用户资料失败");return this.transformUser(s)}catch(e){throw console.error("创建用户资料失败:",e),new Error("创建用户资料失败")}}static async uploadAvatar(r,a){try{const e=a.name.split(".").pop(),s=`avatars/${`${r}-${Date.now()}.${e}`}`,{data:o}=await t.storage.from("avatars").list("",{search:r});if(o&&o.length>0){const r=o.map(r=>r.name);await t.storage.from("avatars").remove(r)}const{error:i}=await t.storage.from("avatars").upload(s,a);if(i)throw i;const{data:n}=t.storage.from("avatars").getPublicUrl(s);return n.publicUrl}catch(e){throw console.error("上传头像失败:",e),new Error("上传头像失败")}}static async updateLastLogin(r){try{const{error:a}=await t.from("user_profiles").update({last_login_at:(new Date).toISOString()}).eq("id",r);if(a)throw a}catch(a){console.error("更新最后登录时间失败:",a)}}static async checkUsernameAvailability(r,a){try{let e=t.from("user_profiles").select("id").eq("username",r);a&&(e=e.neq("id",a));const{data:s,error:o}=await e;if(o)throw o;return!s||0===s.length}catch(e){return console.error("检查用户名可用性失败:",e),!1}}static async getUserStats(r){try{const[a,e]=await Promise.all([t.from("favorites").select("tool_id, product_id").eq("user_id",r),t.from("orders").select("total_amount, status").eq("user_id",r)]),s=a.data||[],o=e.data||[],i=s.filter(r=>r.tool_id).length,n=s.filter(r=>r.product_id).length,c=o.length;return{favoriteToolsCount:i,favoriteProductsCount:n,ordersCount:c,totalSpent:o.filter(r=>"paid"===r.status).reduce((r,t)=>r+t.total_amount,0)}}catch(a){return console.error("获取用户统计信息失败:",a),{favoriteToolsCount:0,favoriteProductsCount:0,ordersCount:0,totalSpent:0}}}static async deleteAccount(r){try{await Promise.all([t.from("favorites").delete().eq("user_id",r),t.from("orders").delete().eq("user_id",r),t.from("user_profiles").delete().eq("id",r)]);const{error:a}=await t.auth.admin.deleteUser(r);if(a)throw a}catch(a){throw console.error("删除用户账户失败:",a),new Error("删除用户账户失败")}}static transformUser(r){return{id:r.id,email:r.email,username:r.username,full_name:r.full_name,avatar_url:r.avatar_url,bio:r.bio,website:r.website,location:r.location,role:r.role,is_active:r.is_active,email_verified:r.email_verified,created_at:r.created_at,updated_at:r.updated_at,last_login_at:r.last_login_at}}}class AuthService{static async login(r){try{const{data:a,error:e}=await t.auth.signInWithPassword({email:r.email,password:r.password});if(e)throw e;if(!a.user)throw new Error("登录失败");await UserService.updateLastLogin(a.user.id);const s=await UserService.getCurrentUser();if(!s)throw new Error("获取用户信息失败");return{user:s,session:a.session}}catch(e){const r=a.handleApiError(e);throw a.logError(r,"AuthService.login"),r}}static async register(r){try{if(r.username){if(!(await UserService.checkUsernameAvailability(r.username)))throw new Error("用户名已被使用")}const{data:a,error:e}=await t.auth.signUp({email:r.email,password:r.password,options:{data:{full_name:r.full_name,username:r.username}}});if(e)throw e;if(!a.user)throw new Error("注册失败");const s=await UserService.createUserProfile(a.user.id,r.email);if(r.full_name||r.username){return{user:await UserService.updateProfile(a.user.id,{full_name:r.full_name,username:r.username}),session:a.session}}return{user:s,session:a.session}}catch(e){const r=a.handleApiError(e);throw a.logError(r,"AuthService.register"),r}}static async logout(){try{const{error:r}=await t.auth.signOut();if(r)throw r}catch(r){const t=a.handleApiError(r);throw a.logError(t,"AuthService.logout"),t}}static async forgotPassword(r){try{const{error:a}=await t.auth.resetPasswordForEmail(r,{redirectTo:`${window.location.origin}/auth/reset-password`});if(a)throw a}catch(e){const r=a.handleApiError(e);throw a.logError(r,"AuthService.forgotPassword"),r}}static async resetPassword(r){try{const{error:a}=await t.auth.updateUser({password:r});if(a)throw a}catch(e){const r=a.handleApiError(e);throw a.logError(r,"AuthService.resetPassword"),r}}static async changePassword(r){try{const{error:a}=await t.auth.updateUser({password:r});if(a)throw a}catch(a){throw console.error("更改密码失败:",a),new Error("更改密码失败")}}static async updateEmail(r){try{const{error:a}=await t.auth.updateUser({email:r});if(a)throw a}catch(a){throw console.error("更新邮箱失败:",a),new Error("更新邮箱失败")}}static async verifyEmail(r,a){try{const{error:e}=await t.auth.verifyOtp({token_hash:r,type:a});if(e)throw e}catch(e){throw console.error("验证邮箱失败:",e),new Error("验证邮箱失败")}}static async resendVerificationEmail(){try{const{data:{user:r}}=await t.auth.getUser();if(!r)throw new Error("用户未登录");const{error:a}=await t.auth.resend({type:"signup",email:r.email});if(a)throw a}catch(r){throw console.error("重新发送验证邮件失败:",r),new Error("重新发送验证邮件失败")}}static async getSession(){try{const{data:{session:r}}=await t.auth.getSession();return r}catch(r){return console.error("获取会话失败:",r),null}}static async refreshSession(){try{const{data:r,error:a}=await t.auth.refreshSession();if(a)throw a;return r.session}catch(r){throw console.error("刷新会话失败:",r),new Error("刷新会话失败")}}static async isAuthenticated(){try{const{data:{user:r}}=await t.auth.getUser();return!!r}catch(r){return!1}}static onAuthStateChange(r){return t.auth.onAuthStateChange(r)}static async signInWithGoogle(){try{const{error:r}=await t.auth.signInWithOAuth({provider:"google",options:{redirectTo:`${window.location.origin}/auth/callback`}});if(r)throw r}catch(r){throw console.error("Google 登录失败:",r),new Error("Google 登录失败")}}static async signInWithGitHub(){try{const{error:r}=await t.auth.signInWithOAuth({provider:"github",options:{redirectTo:`${window.location.origin}/auth/callback`}});if(r)throw r}catch(r){throw console.error("GitHub 登录失败:",r),new Error("GitHub 登录失败")}}static async deleteAccount(){try{const{data:{user:r}}=await t.auth.getUser();if(!r)throw new Error("用户未登录");await UserService.deleteAccount(r.id)}catch(r){throw console.error("删除账户失败:",r),new Error("删除账户失败")}}}const A={class:"admin-view"},b={class:"admin-content"},P={class:"container"},q={class:"admin-layout"},C={class:"admin-nav"},k={class:"admin-main"},I=c(w({__name:"AdminView",setup(r){const t=n(),handleLogout=async()=>{try{await AuthService.logout(),t.push("/")}catch(r){console.error("退出登录失败:",r)}};return f(()=>{(async()=>{try{const r=await UserService.getCurrentUser();if(!r||"admin"!==r.role&&"super_admin"!==r.role)return console.warn("管理员权限检查失败，重定向到首页"),void t.push("/")}catch(r){console.error("检查管理员权限失败:",r),t.push("/auth/login")}})()}),(r,t)=>{const a=U("router-link"),n=U("router-view");return E(),m("div",A,[t[10]||(t[10]=v("div",{class:"admin-header"},[v("div",{class:"container"},[v("h1",null,"管理后台"),v("p",null,"系统管理和数据统计")])],-1)),v("div",b,[v("div",P,[v("div",q,[v("nav",C,[p(a,{to:"/admin/dashboard",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(S),{class:"nav-icon"}),t[0]||(t[0]=g(" 仪表盘 "))]),_:1,__:[0]}),p(a,{to:"/admin/tools",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(e),{class:"nav-icon"}),t[1]||(t[1]=g(" 工具管理 "))]),_:1,__:[1]}),p(a,{to:"/admin/products",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(l),{class:"nav-icon"}),t[2]||(t[2]=g(" 产品管理 "))]),_:1,__:[2]}),p(a,{to:"/admin/users",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(s),{class:"nav-icon"}),t[3]||(t[3]=g(" 用户管理 "))]),_:1,__:[3]}),p(a,{to:"/admin/orders",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(u),{class:"nav-icon"}),t[4]||(t[4]=g(" 订单管理 "))]),_:1,__:[4]}),p(a,{to:"/admin/local",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(d),{class:"nav-icon"}),t[5]||(t[5]=g(" 本地管理 "))]),_:1,__:[5]}),p(a,{to:"/admin/settings",class:"nav-item","active-class":"active"},{default:_(()=>[p(y(o),{class:"nav-icon"}),t[6]||(t[6]=g(" 系统设置 "))]),_:1,__:[6]}),t[9]||(t[9]=v("div",{class:"nav-divider"},null,-1)),p(a,{to:"/",class:"nav-item"},{default:_(()=>[p(y(h),{class:"nav-icon"}),t[7]||(t[7]=g(" 返回首页 "))]),_:1,__:[7]}),v("button",{class:"nav-item logout-btn",onClick:handleLogout},[p(y(i),{class:"nav-icon"}),t[8]||(t[8]=g(" 退出登录 "))])]),v("main",k,[p(n)])])])])])}}}),[["__scopeId","data-v-e3a6eab2"]]);export{I as default};
