{"version":3,"file":"orderService-DsrkZM7H.js","sources":["../../src/services/orderService.ts"],"sourcesContent":["import { supabase } from \"@/lib/supabase\";\r\nimport type { Order, OrderItem, BillingAddress } from \"@/types\";\r\n\r\nexport interface CreateOrderData {\r\n  product_id: string;\r\n  quantity: number;\r\n  billing_address: BillingAddress;\r\n}\r\n\r\nexport interface PaymentData {\r\n  order_id: string;\r\n  payment_method: string;\r\n  payment_id: string;\r\n  amount: number;\r\n}\r\n\r\nexport class OrderService {\r\n  // 创建订单\r\n  static async createOrder(\r\n    orderData: CreateOrderData,\r\n    userId: string,\r\n  ): Promise<Order> {\r\n    try {\r\n      // 获取产品信息\r\n      const { data: product, error: productError } = await supabase\r\n        .from(\"products\")\r\n        .select(\"id, name, price, is_digital\")\r\n        .eq(\"id\", orderData.product_id)\r\n        .eq(\"status\", \"active\")\r\n        .single();\r\n\r\n      if (productError || !product) {\r\n        throw new Error(\"产品不存在或已下架\");\r\n      }\r\n\r\n      const totalAmount = product.price * orderData.quantity;\r\n\r\n      // 创建订单\r\n      const { data: order, error: orderError } = await supabase\r\n        .from(\"orders\")\r\n        .insert({\r\n          user_id: userId,\r\n          total_amount: totalAmount,\r\n          currency: \"CNY\",\r\n          status: \"pending\",\r\n          billing_address: orderData.billing_address,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (orderError) throw orderError;\r\n\r\n      // 创建订单项\r\n      const { data: orderItem, error: itemError } = await supabase\r\n        .from(\"order_items\")\r\n        .insert({\r\n          order_id: order.id,\r\n          product_id: orderData.product_id,\r\n          quantity: orderData.quantity,\r\n          unit_price: product.price,\r\n          total_price: totalAmount,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (itemError) throw itemError;\r\n\r\n      return {\r\n        id: order.id,\r\n        userId: order.user_id,\r\n        items: [\r\n          {\r\n            id: orderItem.id,\r\n            order_id: order.id,\r\n            product_id: orderData.product_id,\r\n            quantity: orderData.quantity,\r\n            unit_price: product.price,\r\n            total_price: totalAmount,\r\n            created_at: orderItem.created_at,\r\n            product: {\r\n              id: product.id,\r\n              name: product.name,\r\n              short_description: \"\",\r\n              images: [],\r\n            },\r\n          },\r\n        ],\r\n        total_amount: totalAmount,\r\n        currency: order.currency,\r\n        status: order.status as \"pending\" | \"paid\" | \"cancelled\" | \"refunded\",\r\n        billing_address: orderData.billing_address,\r\n        created_at: order.created_at,\r\n        updated_at: order.updated_at,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"创建订单失败:\", error);\r\n      throw new Error(\"创建订单失败\");\r\n    }\r\n  }\r\n\r\n  // 处理支付\r\n  static async processPayment(paymentData: PaymentData): Promise<void> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update({\r\n          status: \"paid\",\r\n          payment_method: paymentData.payment_method,\r\n          payment_id: paymentData.payment_id,\r\n          completed_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq(\"id\", paymentData.order_id)\r\n        .eq(\"status\", \"pending\"); // 只能更新待支付的订单\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.error(\"处理支付失败:\", error);\r\n      throw new Error(\"处理支付失败\");\r\n    }\r\n  }\r\n\r\n  // 验证用户是否有下载权限\r\n  static async verifyDownloadPermission(\r\n    productId: string,\r\n    userId: string,\r\n  ): Promise<boolean> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"order_items\")\r\n        .select(\r\n          `\r\n          id,\r\n          orders!inner(\r\n            id,\r\n            user_id,\r\n            status\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"product_id\", productId)\r\n        .eq(\"orders.user_id\", userId)\r\n        .eq(\"orders.status\", \"paid\");\r\n\r\n      if (error) throw error;\r\n\r\n      return data && data.length > 0;\r\n    } catch (error) {\r\n      console.error(\"验证下载权限失败:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 获取用户订单列表\r\n  static async getUserOrders(userId: string): Promise<Order[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"orders\")\r\n        .select(\r\n          `\r\n          *,\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description)\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"user_id\", userId)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      return data.map((order) => ({\r\n        id: order.id,\r\n        userId: order.user_id,\r\n        items: order.order_items.map((item: any) => ({\r\n          id: item.id,\r\n          orderId: item.order_id,\r\n          productId: item.product_id,\r\n          quantity: item.quantity,\r\n          unitPrice: item.unit_price,\r\n          totalPrice: item.total_price,\r\n          createdAt: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                shortDescription: item.products.short_description || \"\",\r\n                images: item.products.images || [],\r\n              }\r\n            : undefined,\r\n        })),\r\n        totalAmount: order.total_amount,\r\n        currency: order.currency,\r\n        status: order.status,\r\n        paymentMethod: order.payment_method,\r\n        paymentId: order.payment_id,\r\n        billingAddress: order.billing_address,\r\n        createdAt: order.created_at,\r\n        updatedAt: order.updated_at,\r\n        completedAt: order.completed_at,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"获取用户订单失败:\", error);\r\n      throw new Error(\"获取用户订单失败\");\r\n    }\r\n  }\r\n\r\n  // 取消订单\r\n  static async cancelOrder(orderId: string, userId: string): Promise<void> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update({\r\n          status: \"cancelled\",\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq(\"id\", orderId)\r\n        .eq(\"user_id\", userId)\r\n        .eq(\"status\", \"pending\"); // 只能取消待支付的订单\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.error(\"取消订单失败:\", error);\r\n      throw new Error(\"取消订单失败\");\r\n    }\r\n  }\r\n\r\n  // 获取订单详情\r\n  static async getOrderById(\r\n    orderId: string,\r\n    userId: string,\r\n  ): Promise<Order | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"orders\")\r\n        .select(\r\n          `\r\n          *,\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description, download_url)\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"id\", orderId)\r\n        .eq(\"user_id\", userId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      if (!data) return null;\r\n\r\n      return {\r\n        id: data.id,\r\n        userId: data.user_id,\r\n        items: data.order_items.map((item: any) => ({\r\n          id: item.id,\r\n          orderId: item.order_id,\r\n          productId: item.product_id,\r\n          quantity: item.quantity,\r\n          unitPrice: item.unit_price,\r\n          totalPrice: item.total_price,\r\n          createdAt: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                shortDescription: item.products.short_description || \"\",\r\n                images: item.products.images || [],\r\n                downloadUrl: item.products.download_url,\r\n              }\r\n            : undefined,\r\n        })),\r\n        totalAmount: data.total_amount,\r\n        currency: data.currency,\r\n        status: data.status,\r\n        paymentMethod: data.payment_method,\r\n        paymentId: data.payment_id,\r\n        billingAddress: data.billing_address,\r\n        createdAt: data.created_at,\r\n        updatedAt: data.updated_at,\r\n        completedAt: data.completed_at,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取订单详情失败:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // 管理员获取所有订单\r\n  static async getAllOrders(filters?: {\r\n    status?: string;\r\n    paymentMethod?: string;\r\n    search?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<{\r\n    orders: Order[];\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n  }> {\r\n    try {\r\n      const page = filters?.page || 1;\r\n      const limit = filters?.limit || 10;\r\n      const offset = (page - 1) * limit;\r\n\r\n      let query = supabase.from(\"orders\").select(\r\n        `\r\n          *,\r\n          user_profiles!inner(id, email, full_name, avatar_url),\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description)\r\n          )\r\n        `,\r\n        { count: \"exact\" },\r\n      );\r\n\r\n      // 应用筛选条件\r\n      if (filters?.status) {\r\n        query = query.eq(\"status\", filters.status);\r\n      }\r\n\r\n      if (filters?.paymentMethod) {\r\n        query = query.eq(\"payment_method\", filters.paymentMethod);\r\n      }\r\n\r\n      if (filters?.search) {\r\n        const search = filters.search.toLowerCase();\r\n        query = query.or(\r\n          `id.ilike.%${search}%,user_profiles.email.ilike.%${search}%,user_profiles.full_name.ilike.%${search}%`,\r\n        );\r\n      }\r\n\r\n      if (filters?.startDate) {\r\n        query = query.gte(\"created_at\", filters.startDate);\r\n      }\r\n\r\n      if (filters?.endDate) {\r\n        const endDate = new Date(filters.endDate);\r\n        endDate.setHours(23, 59, 59, 999);\r\n        query = query.lte(\"created_at\", endDate.toISOString());\r\n      }\r\n\r\n      // 排序和分页\r\n      query = query\r\n        .order(\"created_at\", { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      const orders = (data || []).map((order: any) => ({\r\n        id: order.id,\r\n        userId: order.user_id,\r\n        user: order.user_profiles\r\n          ? {\r\n              id: order.user_profiles.id,\r\n              email: order.user_profiles.email,\r\n              full_name: order.user_profiles.full_name,\r\n              avatar_url: order.user_profiles.avatar_url,\r\n            }\r\n          : undefined,\r\n        items: order.order_items.map((item: any) => ({\r\n          id: item.id,\r\n          orderId: item.order_id,\r\n          productId: item.product_id,\r\n          quantity: item.quantity,\r\n          unitPrice: item.unit_price,\r\n          totalPrice: item.total_price,\r\n          createdAt: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                shortDescription: item.products.short_description || \"\",\r\n                images: item.products.images || [],\r\n              }\r\n            : undefined,\r\n        })),\r\n        totalAmount: order.total_amount,\r\n        currency: order.currency,\r\n        status: order.status,\r\n        paymentMethod: order.payment_method,\r\n        paymentId: order.payment_id,\r\n        billingAddress: order.billing_address,\r\n        createdAt: order.created_at,\r\n        updatedAt: order.updated_at,\r\n        completedAt: order.completed_at,\r\n      }));\r\n\r\n      return {\r\n        orders,\r\n        total: count || 0,\r\n        page,\r\n        limit,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取所有订单失败:\", error);\r\n      throw new Error(\"获取所有订单失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员更新订单状态\r\n  static async updateOrderStatus(\r\n    orderId: string,\r\n    status: \"pending\" | \"paid\" | \"cancelled\" | \"refunded\",\r\n    adminUserId: string,\r\n  ): Promise<void> {\r\n    try {\r\n      const updateData: any = {\r\n        status,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // 如果状态是已完成，设置完成时间\r\n      if (status === \"paid\") {\r\n        updateData.completed_at = new Date().toISOString();\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update(updateData)\r\n        .eq(\"id\", orderId);\r\n\r\n      if (error) throw error;\r\n\r\n      console.log(\r\n        `管理员 ${adminUserId} 将订单 ${orderId} 状态更新为 ${status}`,\r\n      );\r\n    } catch (error) {\r\n      console.error(\"更新订单状态失败:\", error);\r\n      throw new Error(\"更新订单状态失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员获取订单统计\r\n  static async getOrderStats(): Promise<{\r\n    totalOrders: number;\r\n    pendingOrders: number;\r\n    paidOrders: number;\r\n    cancelledOrders: number;\r\n    totalRevenue: number;\r\n    todayOrders: number;\r\n    todayRevenue: number;\r\n  }> {\r\n    try {\r\n      // 获取所有订单统计\r\n      const { data: allOrders, error: allError } = await supabase\r\n        .from(\"orders\")\r\n        .select(\"status, total_amount, created_at\");\r\n\r\n      if (allError) throw allError;\r\n\r\n      // 获取今日订单\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      const todayISO = today.toISOString();\r\n\r\n      const { data: todayOrders, error: todayError } = await supabase\r\n        .from(\"orders\")\r\n        .select(\"status, total_amount\")\r\n        .gte(\"created_at\", todayISO);\r\n\r\n      if (todayError) throw todayError;\r\n\r\n      // 计算统计数据\r\n      const totalOrders = allOrders?.length || 0;\r\n      const pendingOrders =\r\n        allOrders?.filter((o) => o.status === \"pending\").length || 0;\r\n      const paidOrders =\r\n        allOrders?.filter((o) => o.status === \"paid\").length || 0;\r\n      const cancelledOrders =\r\n        allOrders?.filter((o) => o.status === \"cancelled\").length || 0;\r\n      const totalRevenue =\r\n        allOrders\r\n          ?.filter((o) => o.status === \"paid\")\r\n          .reduce((sum, o) => sum + o.total_amount, 0) || 0;\r\n\r\n      const todayOrdersCount = todayOrders?.length || 0;\r\n      const todayRevenue =\r\n        todayOrders\r\n          ?.filter((o) => o.status === \"paid\")\r\n          .reduce((sum, o) => sum + o.total_amount, 0) || 0;\r\n\r\n      return {\r\n        totalOrders,\r\n        pendingOrders,\r\n        paidOrders,\r\n        cancelledOrders,\r\n        totalRevenue,\r\n        todayOrders: todayOrdersCount,\r\n        todayRevenue,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取订单统计失败:\", error);\r\n      throw new Error(\"获取订单统计失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员导出订单数据\r\n  static async exportOrders(filters?: {\r\n    status?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n  }): Promise<string> {\r\n    try {\r\n      let query = supabase.from(\"orders\").select(`\r\n          *,\r\n          user_profiles!inner(email, full_name),\r\n          order_items(\r\n            *,\r\n            products(name)\r\n          )\r\n        `);\r\n\r\n      // 应用筛选条件\r\n      if (filters?.status) {\r\n        query = query.eq(\"status\", filters.status);\r\n      }\r\n\r\n      if (filters?.startDate) {\r\n        query = query.gte(\"created_at\", filters.startDate);\r\n      }\r\n\r\n      if (filters?.endDate) {\r\n        const endDate = new Date(filters.endDate);\r\n        endDate.setHours(23, 59, 59, 999);\r\n        query = query.lte(\"created_at\", endDate.toISOString());\r\n      }\r\n\r\n      query = query.order(\"created_at\", { ascending: false });\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // 生成CSV内容\r\n      const headers = [\r\n        \"订单ID\",\r\n        \"用户邮箱\",\r\n        \"用户姓名\",\r\n        \"商品名称\",\r\n        \"数量\",\r\n        \"单价\",\r\n        \"总金额\",\r\n        \"货币\",\r\n        \"状态\",\r\n        \"支付方式\",\r\n        \"支付ID\",\r\n        \"创建时间\",\r\n        \"完成时间\",\r\n      ];\r\n\r\n      let csvContent = headers.join(\",\") + \"\\n\";\r\n\r\n      data?.forEach((order: any) => {\r\n        order.order_items.forEach((item: any) => {\r\n          const row = [\r\n            order.id,\r\n            order.user_profiles?.email || \"\",\r\n            order.user_profiles?.full_name || \"\",\r\n            item.products?.name || \"\",\r\n            item.quantity,\r\n            item.unit_price,\r\n            order.total_amount,\r\n            order.currency,\r\n            order.status,\r\n            order.payment_method || \"\",\r\n            order.payment_id || \"\",\r\n            new Date(order.created_at).toLocaleString(\"zh-CN\"),\r\n            order.completed_at\r\n              ? new Date(order.completed_at).toLocaleString(\"zh-CN\")\r\n              : \"\",\r\n          ];\r\n          csvContent += row.map((field) => `\"${field}\"`).join(\",\") + \"\\n\";\r\n        });\r\n      });\r\n\r\n      return csvContent;\r\n    } catch (error) {\r\n      console.error(\"导出订单数据失败:\", error);\r\n      throw new Error(\"导出订单数据失败\");\r\n    }\r\n  }\r\n}\r\n"],"names":["OrderService","createOrder","orderData","userId","data","product","error","productError","supabase","from","select","eq","product_id","single","Error","totalAmount","price","quantity","order","orderError","insert","user_id","total_amount","currency","status","billing_address","orderItem","itemError","order_id","id","unit_price","total_price","items","created_at","name","short_description","images","updated_at","console","processPayment","paymentData","update","payment_method","payment_id","completed_at","Date","toISOString","verifyDownloadPermission","productId","length","getUserOrders","ascending","map","order_items","item","orderId","unitPrice","totalPrice","createdAt","products","shortDescription","paymentMethod","paymentId","billingAddress","updatedAt","completedAt","cancelOrder","getOrderById","downloadUrl","download_url","getAllOrders","filters","page","limit","offset","query","count","search","toLowerCase","or","startDate","gte","endDate","setHours","lte","range","orders","user","user_profiles","email","full_name","avatar_url","total","updateOrderStatus","adminUserId","updateData","log","getOrderStats","allOrders","allError","today","todayISO","todayOrders","todayError","totalOrders","pendingOrders","filter","o","paidOrders","cancelledOrders","totalRevenue","reduce","sum","todayOrdersCount","todayRevenue","exportOrders","csvContent","join","forEach","row","_a","_b","_c","toLocaleString","field"],"mappings":"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"}