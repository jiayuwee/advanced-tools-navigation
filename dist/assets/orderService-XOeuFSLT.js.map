{"version":3,"file":"orderService-XOeuFSLT.js","sources":["../../src/services/orderService.ts"],"sourcesContent":["import { supabase } from \"@/lib/supabase\";\r\nimport type { Order, BillingAddress, Product } from \"@/types\";\r\n\r\nexport interface CreateOrderData {\r\n  product_id: string;\r\n  quantity: number;\r\n  billing_address: BillingAddress;\r\n}\r\n\r\nexport interface PaymentData {\r\n  order_id: string;\r\n  payment_method: string;\r\n  payment_id: string;\r\n  amount: number;\r\n}\r\n\r\n// 转换 BillingAddress 类型以匹配数据库格式\r\nconst convertBillingAddress = (address: BillingAddress) => {\r\n  return {\r\n    street: address.address || \"\",\r\n    city: address.city || \"\",\r\n    state: address.state || \"\",\r\n    postal_code: address.postal_code || \"\",\r\n    country: address.country || \"\"\r\n  };\r\n};\r\n\r\nexport class OrderService {\r\n  // 创建订单\r\n  static async createOrder(\r\n    orderData: CreateOrderData,\r\n    userId: string,\r\n  ): Promise<Order> {\r\n    try {\r\n      // 获取产品信息\r\n      // @ts-ignore\r\n      const { data: product, error: productError } = await supabase\r\n        .from(\"products\")\r\n        .select(\"id, name, price, is_digital\")\r\n        .eq(\"id\", orderData.product_id)\r\n        .eq(\"status\", \"active\")\r\n        .single();\r\n\r\n      if (productError || !product) {\r\n        throw new Error(\"产品不存在或已下架\");\r\n      }\r\n\r\n      const totalAmount = (product as any).price * orderData.quantity;\r\n\r\n      // 创建订单\r\n      const orderInsertData = {\r\n        user_id: userId,\r\n        total_amount: totalAmount,\r\n        currency: \"CNY\",\r\n        status: \"pending\",\r\n        billing_address: convertBillingAddress(orderData.billing_address),\r\n      };\r\n\r\n      // @ts-ignore\r\n      const { data: order, error: orderError } = await supabase\r\n        .from(\"orders\")\r\n        .insert([orderInsertData])\r\n        .select()\r\n        .single();\r\n\r\n      if (orderError) throw orderError;\r\n      if (!order) throw new Error(\"创建订单失败\");\r\n\r\n      // 创建订单项\r\n      const orderItemInsertData = {\r\n        order_id: (order as any).id,\r\n        product_id: orderData.product_id,\r\n        quantity: orderData.quantity,\r\n        unit_price: (product as any).price,\r\n        total_price: totalAmount,\r\n      };\r\n\r\n      // @ts-ignore\r\n      const { data: orderItem, error: itemError } = await supabase\r\n        .from(\"order_items\")\r\n        .insert([orderItemInsertData])\r\n        .select()\r\n        .single();\r\n\r\n      if (itemError) throw itemError;\r\n      if (!orderItem) throw new Error(\"创建订单项失败\");\r\n\r\n      return {\r\n        id: (order as any).id,\r\n        user_id: (order as any).user_id,\r\n        items: [\r\n          {\r\n            id: (orderItem as any).id,\r\n            order_id: (order as any).id,\r\n            product_id: orderData.product_id,\r\n            quantity: orderData.quantity,\r\n            unit_price: (product as any).price,\r\n            total_price: totalAmount,\r\n            created_at: (orderItem as any).created_at,\r\n            product: {\r\n              id: (product as any).id,\r\n              name: (product as any).name,\r\n              description: \"\",\r\n              short_description: \"\",\r\n              price: (product as any).price,\r\n              currency: \"CNY\",\r\n              category_id: \"\",\r\n              images: [],\r\n              features: [],\r\n              is_featured: false,\r\n              is_digital: (product as any).is_digital || false,\r\n              status: \"active\",\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString(),\r\n            } as Product,\r\n          },\r\n        ],\r\n        total_amount: totalAmount,\r\n        currency: (order as any).currency,\r\n        status: (order as any).status as \"pending\" | \"paid\" | \"cancelled\" | \"refunded\",\r\n        payment_method: (order as any).payment_method || undefined,\r\n        payment_id: (order as any).payment_id || undefined,\r\n        billing_address: orderData.billing_address,\r\n        created_at: (order as any).created_at,\r\n        updated_at: (order as any).updated_at,\r\n        completed_at: (order as any).completed_at || undefined,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"创建订单失败:\", error);\r\n      throw new Error(\"创建订单失败\");\r\n    }\r\n  }\r\n\r\n  // 处理支付\r\n  static async processPayment(paymentData: PaymentData): Promise<void> {\r\n    try {\r\n      const orderUpdateData = {\r\n        status: \"paid\",\r\n        payment_method: paymentData.payment_method,\r\n        payment_id: paymentData.payment_id,\r\n        completed_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // @ts-ignore\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update(orderUpdateData)\r\n        .eq(\"id\", paymentData.order_id)\r\n        .eq(\"status\", \"pending\"); // 只能更新待支付的订单\r\n\r\n      if (error) throw error;\r\n      \r\n      // 创建支付记录\r\n      const paymentInsertData = {\r\n        order_id: paymentData.order_id,\r\n        amount: paymentData.amount,\r\n        currency: \"CNY\",\r\n        payment_method: paymentData.payment_method,\r\n        provider_payment_id: paymentData.payment_id,\r\n        status: \"completed\",\r\n        completed_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // @ts-ignore\r\n      const { error: paymentError } = await supabase\r\n        .from(\"payments\")\r\n        .insert([paymentInsertData]);\r\n\r\n      if (paymentError) throw paymentError;\r\n    } catch (error) {\r\n      console.error(\"处理支付失败:\", error);\r\n      throw new Error(\"处理支付失败\");\r\n    }\r\n  }\r\n\r\n  // 验证用户是否有下载权限\r\n  static async verifyDownloadPermission(\r\n    productId: string,\r\n    userId: string,\r\n  ): Promise<boolean> {\r\n    try {\r\n      // @ts-ignore\r\n      const { data, error } = await supabase\r\n        .from(\"order_items\")\r\n        .select(\r\n          `\r\n          id,\r\n          orders!inner(\r\n            id,\r\n            user_id,\r\n            status\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"product_id\", productId)\r\n        .eq(\"orders.user_id\", userId)\r\n        .eq(\"orders.status\", \"paid\");\r\n\r\n      if (error) throw error;\r\n\r\n      return data && data.length > 0;\r\n    } catch (error) {\r\n      console.error(\"验证下载权限失败:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 获取用户订单列表\r\n  static async getUserOrders(userId: string): Promise<Order[]> {\r\n    try {\r\n      // @ts-ignore\r\n      const { data, error } = await supabase\r\n        .from(\"orders\")\r\n        .select(\r\n          `\r\n          *,\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description)\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"user_id\", userId)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      return (data || []).map((order: any) => ({\r\n        id: order.id,\r\n        user_id: order.user_id,\r\n        items: order.order_items?.map((item: any) => ({\r\n          id: item.id,\r\n          order_id: item.order_id,\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          unit_price: item.unit_price,\r\n          total_price: item.total_price,\r\n          created_at: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                description: \"\",\r\n                short_description: item.products.short_description || \"\",\r\n                price: 0,\r\n                currency: \"CNY\",\r\n                category_id: \"\",\r\n                images: item.products.images || [],\r\n                features: [],\r\n                is_featured: false,\r\n                is_digital: false,\r\n                status: \"active\",\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString(),\r\n              }\r\n            : undefined,\r\n        })) || [],\r\n        total_amount: order.total_amount,\r\n        currency: order.currency,\r\n        status: order.status,\r\n        payment_method: order.payment_method || undefined,\r\n        payment_id: order.payment_id || undefined,\r\n        billing_address: order.billing_address ? {\r\n          full_name: \"\",\r\n          email: \"\",\r\n          phone: \"\",\r\n          country: order.billing_address.country,\r\n          state: order.billing_address.state,\r\n          city: order.billing_address.city,\r\n          address: order.billing_address.street,\r\n          postal_code: order.billing_address.postal_code,\r\n        } : undefined,\r\n        created_at: order.created_at,\r\n        updated_at: order.updated_at,\r\n        completed_at: order.completed_at || undefined,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"获取用户订单失败:\", error);\r\n      throw new Error(\"获取用户订单失败\");\r\n    }\r\n  }\r\n\r\n  // 取消订单\r\n  static async cancelOrder(orderId: string, userId: string): Promise<void> {\r\n    try {\r\n      const orderUpdateData = {\r\n        status: \"cancelled\",\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // @ts-ignore\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update(orderUpdateData)\r\n        .eq(\"id\", orderId)\r\n        .eq(\"user_id\", userId)\r\n        .eq(\"status\", \"pending\"); // 只能取消待支付的订单\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.error(\"取消订单失败:\", error);\r\n      throw new Error(\"取消订单失败\");\r\n    }\r\n  }\r\n\r\n  // 获取订单详情\r\n  static async getOrderById(\r\n    orderId: string,\r\n    userId: string,\r\n  ): Promise<Order | null> {\r\n    try {\r\n      // @ts-ignore\r\n      const { data, error } = await supabase\r\n        .from(\"orders\")\r\n        .select(\r\n          `\r\n          *,\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description, download_url)\r\n          )\r\n        `,\r\n        )\r\n        .eq(\"id\", orderId)\r\n        .eq(\"user_id\", userId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      if (!data) return null;\r\n\r\n      return {\r\n        id: data.id,\r\n        user_id: data.user_id,\r\n        items: data.order_items?.map((item: any) => ({\r\n          id: item.id,\r\n          order_id: item.order_id,\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          unit_price: item.unit_price,\r\n          total_price: item.total_price,\r\n          created_at: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                description: \"\",\r\n                short_description: item.products.short_description || \"\",\r\n                price: 0,\r\n                currency: \"CNY\",\r\n                category_id: \"\",\r\n                images: item.products.images || [],\r\n                features: [],\r\n                is_featured: false,\r\n                is_digital: false,\r\n                status: \"active\",\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString(),\r\n                download_url: item.products.download_url,\r\n              }\r\n            : undefined,\r\n        })) || [],\r\n        total_amount: data.total_amount,\r\n        currency: data.currency,\r\n        status: data.status,\r\n        payment_method: data.payment_method || undefined,\r\n        payment_id: data.payment_id || undefined,\r\n        billing_address: data.billing_address ? {\r\n          full_name: \"\",\r\n          email: \"\",\r\n          phone: \"\",\r\n          country: data.billing_address.country,\r\n          state: data.billing_address.state,\r\n          city: data.billing_address.city,\r\n          address: data.billing_address.street,\r\n          postal_code: data.billing_address.postal_code,\r\n        } : undefined,\r\n        created_at: data.created_at,\r\n        updated_at: data.updated_at,\r\n        completed_at: data.completed_at || undefined,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取订单详情失败:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // 管理员获取所有订单\r\n  static async getAllOrders(filters?: {\r\n    status?: string;\r\n    paymentMethod?: string;\r\n    search?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<{\r\n    orders: Order[];\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n  }> {\r\n    try {\r\n      const page = filters?.page || 1;\r\n      const limit = filters?.limit || 10;\r\n      const offset = (page - 1) * limit;\r\n\r\n      // @ts-ignore\r\n      let query = supabase.from(\"orders\").select(\r\n        `\r\n          *,\r\n          user_profiles!inner(id, email, full_name, avatar_url),\r\n          order_items(\r\n            *,\r\n            products(id, name, images, short_description)\r\n          )\r\n        `,\r\n        { count: \"exact\" },\r\n      );\r\n\r\n      // 应用筛选条件\r\n      if (filters?.status) {\r\n        query = query.eq(\"status\", filters.status);\r\n      }\r\n\r\n      if (filters?.paymentMethod) {\r\n        query = query.eq(\"payment_method\", filters.paymentMethod);\r\n      }\r\n\r\n      if (filters?.search) {\r\n        const search = filters.search.toLowerCase();\r\n        query = query.or(\r\n          `id.ilike.%${search}%,user_profiles.email.ilike.%${search}%,user_profiles.full_name.ilike.%${search}%`,\r\n        );\r\n      }\r\n\r\n      if (filters?.startDate) {\r\n        query = query.gte(\"created_at\", filters.startDate);\r\n      }\r\n\r\n      if (filters?.endDate) {\r\n        const endDate = new Date(filters.endDate);\r\n        endDate.setHours(23, 59, 59, 999);\r\n        query = query.lte(\"created_at\", endDate.toISOString());\r\n      }\r\n\r\n      // 排序和分页\r\n      query = query\r\n        .order(\"created_at\", { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      // @ts-ignore\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      const orders = (data || []).map((order: any) => ({\r\n        id: order.id,\r\n        user_id: order.user_id,\r\n        user: order.user_profiles\r\n          ? {\r\n              id: order.user_profiles.id,\r\n              email: order.user_profiles.email,\r\n              full_name: order.user_profiles.full_name,\r\n              avatar_url: order.user_profiles.avatar_url,\r\n            }\r\n          : undefined,\r\n        items: order.order_items?.map((item: any) => ({\r\n          id: item.id,\r\n          order_id: item.order_id,\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          unit_price: item.unit_price,\r\n          total_price: item.total_price,\r\n          created_at: item.created_at,\r\n          product: item.products\r\n            ? {\r\n                id: item.products.id,\r\n                name: item.products.name,\r\n                description: \"\",\r\n                short_description: item.products.short_description || \"\",\r\n                price: 0,\r\n                currency: \"CNY\",\r\n                category_id: \"\",\r\n                images: item.products.images || [],\r\n                features: [],\r\n                is_featured: false,\r\n                is_digital: false,\r\n                status: \"active\",\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString(),\r\n              }\r\n            : undefined,\r\n        })) || [],\r\n        total_amount: order.total_amount,\r\n        currency: order.currency,\r\n        status: order.status,\r\n        payment_method: order.payment_method || undefined,\r\n        payment_id: order.payment_id || undefined,\r\n        billing_address: order.billing_address ? {\r\n          full_name: \"\",\r\n          email: \"\",\r\n          phone: \"\",\r\n          country: order.billing_address.country,\r\n          state: order.billing_address.state,\r\n          city: order.billing_address.city,\r\n          address: order.billing_address.street,\r\n          postal_code: order.billing_address.postal_code,\r\n        } : undefined,\r\n        created_at: order.created_at,\r\n        updated_at: order.updated_at,\r\n        completed_at: order.completed_at || undefined,\r\n      }));\r\n\r\n      return {\r\n        orders,\r\n        total: count || 0,\r\n        page,\r\n        limit,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取所有订单失败:\", error);\r\n      throw new Error(\"获取所有订单失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员更新订单状态\r\n  static async updateOrderStatus(\r\n    orderId: string,\r\n    status: \"pending\" | \"paid\" | \"cancelled\" | \"refunded\",\r\n    adminUserId: string,\r\n  ): Promise<void> {\r\n    try {\r\n      const updateData: any = {\r\n        status,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // 如果状态是已完成，设置完成时间\r\n      if (status === \"paid\") {\r\n        updateData.completed_at = new Date().toISOString();\r\n      }\r\n\r\n      // @ts-ignore\r\n      const { error } = await supabase\r\n        .from(\"orders\")\r\n        .update(updateData)\r\n        .eq(\"id\", orderId);\r\n\r\n      if (error) throw error;\r\n\r\n      console.log(\r\n        `管理员 ${adminUserId} 将订单 ${orderId} 状态更新为 ${status}`,\r\n      );\r\n    } catch (error) {\r\n      console.error(\"更新订单状态失败:\", error);\r\n      throw new Error(\"更新订单状态失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员获取订单统计\r\n  static async getOrderStats(): Promise<{\r\n    totalOrders: number;\r\n    pendingOrders: number;\r\n    paidOrders: number;\r\n    cancelledOrders: number;\r\n    totalRevenue: number;\r\n    todayOrders: number;\r\n    todayRevenue: number;\r\n  }> {\r\n    try {\r\n      // 获取所有订单统计\r\n      // @ts-ignore\r\n      const { data: allOrders, error: allError } = await supabase\r\n        .from(\"orders\")\r\n        .select(\"status, total_amount, created_at\");\r\n\r\n      if (allError) throw allError;\r\n\r\n      // 获取今日订单\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      const todayISO = today.toISOString();\r\n\r\n      // @ts-ignore\r\n      const { data: todayOrders, error: todayError } = await supabase\r\n        .from(\"orders\")\r\n        .select(\"status, total_amount\")\r\n        .gte(\"created_at\", todayISO);\r\n\r\n      if (todayError) throw todayError;\r\n\r\n      // 计算统计数据\r\n      const totalOrders = allOrders?.length || 0;\r\n      const pendingOrders =\r\n        allOrders?.filter((o) => o.status === \"pending\").length || 0;\r\n      const paidOrders =\r\n        allOrders?.filter((o) => o.status === \"paid\").length || 0;\r\n      const cancelledOrders =\r\n        allOrders?.filter((o) => o.status === \"cancelled\").length || 0;\r\n      const totalRevenue =\r\n        allOrders\r\n          ?.filter((o) => o.status === \"paid\")\r\n          .reduce((sum, o) => sum + o.total_amount, 0) || 0;\r\n\r\n      const todayOrdersCount = todayOrders?.length || 0;\r\n      const todayRevenue =\r\n        todayOrders\r\n          ?.filter((o) => o.status === \"paid\")\r\n          .reduce((sum, o) => sum + o.total_amount, 0) || 0;\r\n\r\n      return {\r\n        totalOrders,\r\n        pendingOrders,\r\n        paidOrders,\r\n        cancelledOrders,\r\n        totalRevenue,\r\n        todayOrders: todayOrdersCount,\r\n        todayRevenue,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"获取订单统计失败:\", error);\r\n      throw new Error(\"获取订单统计失败\");\r\n    }\r\n  }\r\n\r\n  // 管理员导出订单数据\r\n  static async exportOrders(filters?: {\r\n    status?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n  }): Promise<string> {\r\n    try {\r\n      // @ts-ignore\r\n      let query = supabase.from(\"orders\").select(`\r\n          *,\r\n          user_profiles!inner(email, full_name),\r\n          order_items(\r\n            *,\r\n            products(name)\r\n          )\r\n        `);\r\n\r\n      // 应用筛选条件\r\n      if (filters?.status) {\r\n        query = query.eq(\"status\", filters.status);\r\n      }\r\n\r\n      if (filters?.startDate) {\r\n        query = query.gte(\"created_at\", filters.startDate);\r\n      }\r\n\r\n      if (filters?.endDate) {\r\n        const endDate = new Date(filters.endDate);\r\n        endDate.setHours(23, 59, 59, 999);\r\n        query = query.lte(\"created_at\", endDate.toISOString());\r\n      }\r\n\r\n      query = query.order(\"created_at\", { ascending: false });\r\n\r\n      // @ts-ignore\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // 生成CSV内容\r\n      const headers = [\r\n        \"订单ID\",\r\n        \"用户邮箱\",\r\n        \"用户姓名\",\r\n        \"商品名称\",\r\n        \"数量\",\r\n        \"单价\",\r\n        \"总金额\",\r\n        \"货币\",\r\n        \"状态\",\r\n        \"支付方式\",\r\n        \"支付ID\",\r\n        \"创建时间\",\r\n        \"完成时间\",\r\n      ];\r\n\r\n      let csvContent = headers.join(\",\") + \"\\n\";\r\n\r\n      data?.forEach((order: any) => {\r\n        order.order_items?.forEach((item: any) => {\r\n          const row = [\r\n            order.id,\r\n            order.user_profiles?.email || \"\",\r\n            order.user_profiles?.full_name || \"\",\r\n            item.products?.name || \"\",\r\n            item.quantity,\r\n            item.unit_price,\r\n            order.total_amount,\r\n            order.currency,\r\n            order.status,\r\n            order.payment_method || \"\",\r\n            order.payment_id || \"\",\r\n            new Date(order.created_at).toLocaleString(\"zh-CN\"),\r\n            order.completed_at\r\n              ? new Date(order.completed_at).toLocaleString(\"zh-CN\")\r\n              : \"\",\r\n          ];\r\n          csvContent += row.map((field) => `\"${field}\"`).join(\",\") + \"\\n\";\r\n        });\r\n      });\r\n\r\n      return csvContent;\r\n    } catch (error) {\r\n      console.error(\"导出订单数据失败:\", error);\r\n      throw new Error(\"导出订单数据失败\");\r\n    }\r\n  }\r\n}"],"names":["OrderService","createOrder","orderData","userId","data","product","error","productError","supabase","from","select","eq","product_id","single","Error","totalAmount","price","quantity","orderInsertData","user_id","total_amount","currency","status","billing_address","address","street","city","state","postal_code","country","order","orderError","insert","orderItemInsertData","order_id","id","unit_price","total_price","orderItem","itemError","items","created_at","name","description","short_description","category_id","images","features","is_featured","is_digital","Date","toISOString","updated_at","payment_method","payment_id","completed_at","console","processPayment","paymentData","orderUpdateData","update","paymentInsertData","amount","provider_payment_id","paymentError","verifyDownloadPermission","productId","length","getUserOrders","ascending","map","_a","order_items","item","products","full_name","email","phone","cancelOrder","orderId","getOrderById","download_url","getAllOrders","filters","page","limit","offset","query","count","paymentMethod","search","toLowerCase","or","startDate","gte","endDate","setHours","lte","range","orders","user","user_profiles","avatar_url","total","updateOrderStatus","adminUserId","updateData","log","getOrderStats","allOrders","allError","today","todayISO","todayOrders","todayError","totalOrders","pendingOrders","filter","o","paidOrders","cancelledOrders","totalRevenue","reduce","sum","todayOrdersCount","todayRevenue","exportOrders","csvContent","join","forEach","row","_b","_c","toLocaleString","field"],"mappings":"qEA2BO,MAAMA,aAEX,wBAAaC,CACXC,EACAC,GAEA,IAGE,MAAQC,KAAMC,EAASC,MAAOC,SAAuBC,EAClDC,KAAK,YACLC,OAAO,+BACPC,GAAG,KAAMT,EAAUU,YACnBD,GAAG,SAAU,UACbE,SAEH,GAAIN,IAAiBF,EACnB,MAAM,IAAIS,MAAM,aAGlB,MAAMC,EAAeV,EAAgBW,MAAQd,EAAUe,SAGjDC,EAAkB,CACtBC,QAAShB,EACTiB,aAAcL,EACdM,SAAU,MACVC,OAAQ,UACRC,iBAtCuBC,EAsCgBtB,EAAUqB,gBArChD,CACLE,OAAQD,EAAQA,SAAW,GAC3BE,KAAMF,EAAQE,MAAQ,GACtBC,MAAOH,EAAQG,OAAS,GACxBC,YAAaJ,EAAQI,aAAe,GACpCC,QAASL,EAAQK,SAAW,OAoClBzB,KAAM0B,EAAOxB,MAAOyB,SAAqBvB,EAC9CC,KAAK,UACLuB,OAAO,CAACd,IACRR,SACAG,SAEH,GAAIkB,EAAY,MAAMA,EACtB,IAAKD,EAAO,MAAM,IAAIhB,MAAM,UAG5B,MAAMmB,EAAsB,CAC1BC,SAAWJ,EAAcK,GACzBvB,WAAYV,EAAUU,WACtBK,SAAUf,EAAUe,SACpBmB,WAAa/B,EAAgBW,MAC7BqB,YAAatB,IAIPX,KAAMkC,EAAWhC,MAAOiC,SAAoB/B,EACjDC,KAAK,eACLuB,OAAO,CAACC,IACRvB,SACAG,SAEH,GAAI0B,EAAW,MAAMA,EACrB,IAAKD,EAAW,MAAM,IAAIxB,MAAM,WAEhC,MAAO,CACLqB,GAAKL,EAAcK,GACnBhB,QAAUW,EAAcX,QACxBqB,MAAO,CACL,CACEL,GAAKG,EAAkBH,GACvBD,SAAWJ,EAAcK,GACzBvB,WAAYV,EAAUU,WACtBK,SAAUf,EAAUe,SACpBmB,WAAa/B,EAAgBW,MAC7BqB,YAAatB,EACb0B,WAAaH,EAAkBG,WAC/BpC,QAAS,CACP8B,GAAK9B,EAAgB8B,GACrBO,KAAOrC,EAAgBqC,KACvBC,YAAa,GACbC,kBAAmB,GACnB5B,MAAQX,EAAgBW,MACxBK,SAAU,MACVwB,YAAa,GACbC,OAAQ,GACRC,SAAU,GACVC,aAAa,EACbC,WAAa5C,EAAgB4C,aAAc,EAC3C3B,OAAQ,SACRmB,YAAA,IAAgBS,MAAOC,cACvBC,YAAA,IAAgBF,MAAOC,iBAI7B/B,aAAcL,EACdM,SAAWS,EAAcT,SACzBC,OAASQ,EAAcR,OACvB+B,eAAiBvB,EAAcuB,qBAAkB,EACjDC,WAAaxB,EAAcwB,iBAAc,EACzC/B,gBAAiBrB,EAAUqB,gBAC3BkB,WAAaX,EAAcW,WAC3BW,WAAatB,EAAcsB,WAC3BG,aAAezB,EAAcyB,mBAAgB,EAEjD,OAASjD,GAEP,MADAkD,QAAQlD,MAAM,UAAWA,GACnB,IAAIQ,MAAM,SAClB,CAjH0B,IAACU,CAkH7B,CAGA,2BAAaiC,CAAeC,GAC1B,IACE,MAAMC,EAAkB,CACtBrC,OAAQ,OACR+B,eAAgBK,EAAYL,eAC5BC,WAAYI,EAAYJ,WACxBC,cAAA,IAAkBL,MAAOC,cACzBC,YAAA,IAAgBF,MAAOC,gBAInB7C,MAAEA,SAAgBE,EACrBC,KAAK,UACLmD,OAAOD,GACPhD,GAAG,KAAM+C,EAAYxB,UACrBvB,GAAG,SAAU,WAEhB,GAAIL,EAAO,MAAMA,EAGjB,MAAMuD,EAAoB,CACxB3B,SAAUwB,EAAYxB,SACtB4B,OAAQJ,EAAYI,OACpBzC,SAAU,MACVgC,eAAgBK,EAAYL,eAC5BU,oBAAqBL,EAAYJ,WACjChC,OAAQ,YACRiC,cAAA,IAAkBL,MAAOC,cACzBC,YAAA,IAAgBF,MAAOC,gBAIjB7C,MAAO0D,SAAuBxD,EACnCC,KAAK,YACLuB,OAAO,CAAC6B,IAEX,GAAIG,EAAc,MAAMA,CAC1B,OAAS1D,GAEP,MADAkD,QAAQlD,MAAM,UAAWA,GACnB,IAAIQ,MAAM,SAClB,CACF,CAGA,qCAAamD,CACXC,EACA/D,GAEA,IAEE,MAAMC,KAAEA,QAAME,SAAgBE,EAC3BC,KAAK,eACLC,OACC,8HASDC,GAAG,aAAcuD,GACjBvD,GAAG,iBAAkBR,GACrBQ,GAAG,gBAAiB,QAEvB,GAAIL,EAAO,MAAMA,EAEjB,OAAOF,GAAQA,EAAK+D,OAAS,CAC/B,OAAS7D,GAEP,OADAkD,QAAQlD,MAAM,YAAaA,IACpB,CACT,CACF,CAGA,0BAAa8D,CAAcjE,GACzB,IAEE,MAAMC,KAAEA,QAAME,SAAgBE,EAC3BC,KAAK,UACLC,OACC,4IAQDC,GAAG,UAAWR,GACd2B,MAAM,aAAc,CAAEuC,WAAW,IAEpC,GAAI/D,EAAO,MAAMA,EAEjB,OAAQF,GAAQ,IAAIkE,IAAKxC,UAAgB,MAAA,CACvCK,GAAIL,EAAMK,GACVhB,QAASW,EAAMX,QACfqB,OAAO,OAAA+B,EAAAzC,EAAM0C,kBAAN,EAAAD,EAAmBD,IAAKG,IAAA,CAC7BtC,GAAIsC,EAAKtC,GACTD,SAAUuC,EAAKvC,SACftB,WAAY6D,EAAK7D,WACjBK,SAAUwD,EAAKxD,SACfmB,WAAYqC,EAAKrC,WACjBC,YAAaoC,EAAKpC,YAClBI,WAAYgC,EAAKhC,WACjBpC,QAASoE,EAAKC,SACV,CACEvC,GAAIsC,EAAKC,SAASvC,GAClBO,KAAM+B,EAAKC,SAAShC,KACpBC,YAAa,GACbC,kBAAmB6B,EAAKC,SAAS9B,mBAAqB,GACtD5B,MAAO,EACPK,SAAU,MACVwB,YAAa,GACbC,OAAQ2B,EAAKC,SAAS5B,QAAU,GAChCC,SAAU,GACVC,aAAa,EACbC,YAAY,EACZ3B,OAAQ,SACRmB,YAAA,IAAgBS,MAAOC,cACvBC,YAAA,IAAgBF,MAAOC,oBAEzB,OACC,GACP/B,aAAcU,EAAMV,aACpBC,SAAUS,EAAMT,SAChBC,OAAQQ,EAAMR,OACd+B,eAAgBvB,EAAMuB,qBAAkB,EACxCC,WAAYxB,EAAMwB,iBAAc,EAChC/B,gBAAiBO,EAAMP,gBAAkB,CACvCoD,UAAW,GACXC,MAAO,GACPC,MAAO,GACPhD,QAASC,EAAMP,gBAAgBM,QAC/BF,MAAOG,EAAMP,gBAAgBI,MAC7BD,KAAMI,EAAMP,gBAAgBG,KAC5BF,QAASM,EAAMP,gBAAgBE,OAC/BG,YAAaE,EAAMP,gBAAgBK,kBACjC,EACJa,WAAYX,EAAMW,WAClBW,WAAYtB,EAAMsB,WAClBG,aAAczB,EAAMyB,mBAAgB,IAExC,OAASjD,GAEP,MADAkD,QAAQlD,MAAM,YAAaA,GACrB,IAAIQ,MAAM,WAClB,CACF,CAGA,wBAAagE,CAAYC,EAAiB5E,GACxC,IACE,MAAMwD,EAAkB,CACtBrC,OAAQ,YACR8B,YAAA,IAAgBF,MAAOC,gBAInB7C,MAAEA,SAAgBE,EACrBC,KAAK,UACLmD,OAAOD,GACPhD,GAAG,KAAMoE,GACTpE,GAAG,UAAWR,GACdQ,GAAG,SAAU,WAEhB,GAAIL,EAAO,MAAMA,CACnB,OAASA,GAEP,MADAkD,QAAQlD,MAAM,UAAWA,GACnB,IAAIQ,MAAM,SAClB,CACF,CAGA,yBAAakE,CACXD,EACA5E,SAEA,IAEE,MAAMC,KAAEA,QAAME,SAAgBE,EAC3BC,KAAK,UACLC,OACC,0JAQDC,GAAG,KAAMoE,GACTpE,GAAG,UAAWR,GACdU,SAEH,GAAIP,EAAO,MAAMA,EACjB,OAAKF,EAEE,CACL+B,GAAI/B,EAAK+B,GACThB,QAASf,EAAKe,QACdqB,OAAO,OAAA+B,EAAAnE,EAAKoE,kBAAL,EAAAD,EAAkBD,IAAKG,IAAA,CAC5BtC,GAAIsC,EAAKtC,GACTD,SAAUuC,EAAKvC,SACftB,WAAY6D,EAAK7D,WACjBK,SAAUwD,EAAKxD,SACfmB,WAAYqC,EAAKrC,WACjBC,YAAaoC,EAAKpC,YAClBI,WAAYgC,EAAKhC,WACjBpC,QAASoE,EAAKC,SACV,CACEvC,GAAIsC,EAAKC,SAASvC,GAClBO,KAAM+B,EAAKC,SAAShC,KACpBC,YAAa,GACbC,kBAAmB6B,EAAKC,SAAS9B,mBAAqB,GACtD5B,MAAO,EACPK,SAAU,MACVwB,YAAa,GACbC,OAAQ2B,EAAKC,SAAS5B,QAAU,GAChCC,SAAU,GACVC,aAAa,EACbC,YAAY,EACZ3B,OAAQ,SACRmB,YAAA,IAAgBS,MAAOC,cACvBC,YAAA,IAAgBF,MAAOC,cACvB8B,aAAcR,EAAKC,SAASO,mBAE9B,OACC,GACP7D,aAAchB,EAAKgB,aACnBC,SAAUjB,EAAKiB,SACfC,OAAQlB,EAAKkB,OACb+B,eAAgBjD,EAAKiD,qBAAkB,EACvCC,WAAYlD,EAAKkD,iBAAc,EAC/B/B,gBAAiBnB,EAAKmB,gBAAkB,CACtCoD,UAAW,GACXC,MAAO,GACPC,MAAO,GACPhD,QAASzB,EAAKmB,gBAAgBM,QAC9BF,MAAOvB,EAAKmB,gBAAgBI,MAC5BD,KAAMtB,EAAKmB,gBAAgBG,KAC3BF,QAASpB,EAAKmB,gBAAgBE,OAC9BG,YAAaxB,EAAKmB,gBAAgBK,kBAChC,EACJa,WAAYrC,EAAKqC,WACjBW,WAAYhD,EAAKgD,WACjBG,aAAcnD,EAAKmD,mBAAgB,GAlDnB,IAoDpB,OAASjD,GAEP,OADAkD,QAAQlD,MAAM,YAAaA,GACpB,IACT,CACF,CAGA,yBAAa4E,CAAaC,GAcxB,IACE,MAAMC,SAAOD,WAASC,OAAQ,EACxBC,SAAQF,WAASE,QAAS,GAC1BC,GAAUF,EAAO,GAAKC,EAG5B,IAAIE,EAAQ/E,EAASC,KAAK,UAAUC,OAClC,6MAQA,CAAE8E,MAAO,UAYX,UARIL,WAAS7D,UACXiE,EAAQA,EAAM5E,GAAG,SAAUwE,EAAQ7D,gBAGjC6D,WAASM,iBACXF,EAAQA,EAAM5E,GAAG,iBAAkBwE,EAAQM,sBAGzCN,WAASO,OAAQ,CACnB,MAAMA,EAASP,EAAQO,OAAOC,cAC9BJ,EAAQA,EAAMK,GACZ,aAAaF,iCAAsCA,qCAA0CA,KAEjG,CAMA,UAJIP,WAASU,aACXN,EAAQA,EAAMO,IAAI,aAAcX,EAAQU,kBAGtCV,WAASY,QAAS,CACpB,MAAMA,EAAU,IAAI7C,KAAKiC,EAAQY,SACjCA,EAAQC,SAAS,GAAI,GAAI,GAAI,KAC7BT,EAAQA,EAAMU,IAAI,aAAcF,EAAQ5C,cAC1C,CAGAoC,EAAQA,EACLzD,MAAM,aAAc,CAAEuC,WAAW,IACjC6B,MAAMZ,EAAQA,EAASD,EAAQ,GAGlC,MAAMjF,KAAEA,EAAAE,MAAMA,EAAAkF,MAAOA,SAAgBD,EAErC,GAAIjF,EAAO,MAAMA,EA4DjB,MAAO,CACL6F,QA3Dc/F,GAAQ,IAAIkE,IAAKxC,UAAgB,MAAA,CAC/CK,GAAIL,EAAMK,GACVhB,QAASW,EAAMX,QACfiF,KAAMtE,EAAMuE,cACR,CACElE,GAAIL,EAAMuE,cAAclE,GACxByC,MAAO9C,EAAMuE,cAAczB,MAC3BD,UAAW7C,EAAMuE,cAAc1B,UAC/B2B,WAAYxE,EAAMuE,cAAcC,iBAElC,EACJ9D,OAAO,OAAA+B,EAAAzC,EAAM0C,kBAAN,EAAAD,EAAmBD,IAAKG,IAAA,CAC7BtC,GAAIsC,EAAKtC,GACTD,SAAUuC,EAAKvC,SACftB,WAAY6D,EAAK7D,WACjBK,SAAUwD,EAAKxD,SACfmB,WAAYqC,EAAKrC,WACjBC,YAAaoC,EAAKpC,YAClBI,WAAYgC,EAAKhC,WACjBpC,QAASoE,EAAKC,SACV,CACEvC,GAAIsC,EAAKC,SAASvC,GAClBO,KAAM+B,EAAKC,SAAShC,KACpBC,YAAa,GACbC,kBAAmB6B,EAAKC,SAAS9B,mBAAqB,GACtD5B,MAAO,EACPK,SAAU,MACVwB,YAAa,GACbC,OAAQ2B,EAAKC,SAAS5B,QAAU,GAChCC,SAAU,GACVC,aAAa,EACbC,YAAY,EACZ3B,OAAQ,SACRmB,YAAA,IAAgBS,MAAOC,cACvBC,YAAA,IAAgBF,MAAOC,oBAEzB,OACC,GACP/B,aAAcU,EAAMV,aACpBC,SAAUS,EAAMT,SAChBC,OAAQQ,EAAMR,OACd+B,eAAgBvB,EAAMuB,qBAAkB,EACxCC,WAAYxB,EAAMwB,iBAAc,EAChC/B,gBAAiBO,EAAMP,gBAAkB,CACvCoD,UAAW,GACXC,MAAO,GACPC,MAAO,GACPhD,QAASC,EAAMP,gBAAgBM,QAC/BF,MAAOG,EAAMP,gBAAgBI,MAC7BD,KAAMI,EAAMP,gBAAgBG,KAC5BF,QAASM,EAAMP,gBAAgBE,OAC/BG,YAAaE,EAAMP,gBAAgBK,kBACjC,EACJa,WAAYX,EAAMW,WAClBW,WAAYtB,EAAMsB,WAClBG,aAAczB,EAAMyB,mBAAgB,KAKpCgD,MAAOf,GAAS,EAChBJ,OACAC,QAEJ,OAAS/E,GAEP,MADAkD,QAAQlD,MAAM,YAAaA,GACrB,IAAIQ,MAAM,WAClB,CACF,CAGA,8BAAa0F,CACXzB,EACAzD,EACAmF,GAEA,IACE,MAAMC,EAAkB,CACtBpF,SACA8B,YAAA,IAAgBF,MAAOC,eAIV,SAAX7B,IACFoF,EAAWnD,cAAA,IAAmBL,MAAOC,eAIvC,MAAM7C,MAAEA,SAAgBE,EACrBC,KAAK,UACLmD,OAAO8C,GACP/F,GAAG,KAAMoE,GAEZ,GAAIzE,EAAO,MAAMA,EAEjBkD,QAAQmD,IACN,OAAOF,SAAmB1B,WAAiBzD,IAE/C,OAAShB,GAEP,MADAkD,QAAQlD,MAAM,YAAaA,GACrB,IAAIQ,MAAM,WAClB,CACF,CAGA,0BAAa8F,GASX,IAGE,MAAQxG,KAAMyG,EAAWvG,MAAOwG,SAAmBtG,EAChDC,KAAK,UACLC,OAAO,oCAEV,GAAIoG,EAAU,MAAMA,EAGpB,MAAMC,MAAY7D,KAClB6D,EAAMf,SAAS,EAAG,EAAG,EAAG,GACxB,MAAMgB,EAAWD,EAAM5D,eAGf/C,KAAM6G,EAAa3G,MAAO4G,SAAqB1G,EACpDC,KAAK,UACLC,OAAO,wBACPoF,IAAI,aAAckB,GAErB,GAAIE,EAAY,MAAMA,EAGtB,MAAMC,SAAcN,WAAW1C,SAAU,EACnCiD,SACJP,WAAWQ,OAAQC,GAAmB,YAAbA,EAAEhG,QAAsB6C,SAAU,EACvDoD,SACJV,WAAWQ,OAAQC,GAAmB,SAAbA,EAAEhG,QAAmB6C,SAAU,EACpDqD,SACJX,WAAWQ,OAAQC,GAAmB,cAAbA,EAAEhG,QAAwB6C,SAAU,EACzDsD,GACJ,MAAAZ,OAAA,EAAAA,EACIQ,OAAQC,GAAmB,SAAbA,EAAEhG,QACjBoG,OAAO,CAACC,EAAKL,IAAMK,EAAML,EAAElG,aAAc,KAAM,EAE9CwG,SAAmBX,WAAa9C,SAAU,EAMhD,MAAO,CACLgD,cACAC,gBACAG,aACAC,kBACAC,eACAR,YAAaW,EACbC,cAXA,MAAAZ,OAAA,EAAAA,EACII,OAAQC,GAAmB,SAAbA,EAAEhG,QACjBoG,OAAO,CAACC,EAAKL,IAAMK,EAAML,EAAElG,aAAc,KAAM,EAWtD,OAASd,GAEP,MADAkD,QAAQlD,MAAM,YAAaA,GACrB,IAAIQ,MAAM,WAClB,CACF,CAGA,yBAAagH,CAAa3C,GAKxB,IAEE,IAAII,EAAQ/E,EAASC,KAAK,UAAUC,OAAO,+JAkB3C,UARIyE,WAAS7D,UACXiE,EAAQA,EAAM5E,GAAG,SAAUwE,EAAQ7D,gBAGjC6D,WAASU,aACXN,EAAQA,EAAMO,IAAI,aAAcX,EAAQU,kBAGtCV,WAASY,QAAS,CACpB,MAAMA,EAAU,IAAI7C,KAAKiC,EAAQY,SACjCA,EAAQC,SAAS,GAAI,GAAI,GAAI,KAC7BT,EAAQA,EAAMU,IAAI,aAAcF,EAAQ5C,cAC1C,CAEAoC,EAAQA,EAAMzD,MAAM,aAAc,CAAEuC,WAAW,IAG/C,MAAMjE,KAAEA,EAAAE,MAAMA,SAAgBiF,EAE9B,GAAIjF,EAAO,MAAMA,EAmBjB,IAAIyH,EAhBY,CACd,OACA,OACA,OACA,OACA,KACA,KACA,MACA,KACA,KACA,OACA,OACA,OACA,QAGuBC,KAAK,KAAO,KAyBrC,OAvBA,MAAA5H,GAAAA,EAAM6H,QAASnG,UACb,OAAAyC,EAAAzC,EAAM0C,cAAND,EAAmB0D,QAASxD,cAC1B,MAAMyD,EAAM,CACVpG,EAAMK,IACN,OAAAoC,EAAAzC,EAAMuE,oBAAN,EAAA9B,EAAqBK,QAAS,IAC9B,OAAAuD,EAAArG,EAAMuE,oBAAN,EAAA8B,EAAqBxD,YAAa,IAClC,OAAAyD,EAAA3D,EAAKC,eAAL,EAAA0D,EAAe1F,OAAQ,GACvB+B,EAAKxD,SACLwD,EAAKrC,WACLN,EAAMV,aACNU,EAAMT,SACNS,EAAMR,OACNQ,EAAMuB,gBAAkB,GACxBvB,EAAMwB,YAAc,GACpB,IAAIJ,KAAKpB,EAAMW,YAAY4F,eAAe,SAC1CvG,EAAMyB,aACF,IAAIL,KAAKpB,EAAMyB,cAAc8E,eAAe,SAC5C,IAENN,GAAcG,EAAI5D,IAAKgE,GAAU,IAAIA,MAAUN,KAAK,KAAO,SAIxDD,CACT,OAASzH,GAEP,MADAkD,QAAQlD,MAAM,YAAaA,GACrB,IAAIQ,MAAM,WAClB,CACF"}