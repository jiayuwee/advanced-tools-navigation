import{d as r,o as t,a0 as e,aA as a,aB as o,aC as s,aD as n,aw as i,av as c,aE as l,a5 as u,t as d,v as h,A as w,a6 as f,Y as m,I as v}from"./vendor-BUZxw6e1.js";import{s as g,u as p,_}from"./index-BxdVNC7e.js";class y{static async getCurrentUser(){try{const{data:{user:r}}=await g.auth.getUser();if(!r)return null;const{data:t,error:e}=await g.from("user_profiles").select("*").eq("id",r.id).single();if(e){if("PGRST116"===e.code)return this.createUserProfile(r.id,r.email);throw e}return this.transformUser(t)}catch(r){return console.error("获取用户信息失败:",r),null}}static async getUserProfile(r){try{const{data:t,error:e}=await g.from("user_profiles").select("*").eq("id",r).single();if(e)throw e;return t?this.transformUser(t):null}catch(t){return console.error("获取用户资料失败:",t),null}}static async updateProfile(r,t){try{const e={full_name:t.fullName,username:t.username,bio:t.bio,website:t.website,location:t.location,updated_at:(new Date).toISOString()};if(t.avatar){const a=await this.uploadAvatar(r,t.avatar);e.avatar_url=a}const{data:a,error:o}=await g.from("user_profiles").update(e).eq("id",r).select("*").single();if(o)throw o;if(!a)throw new Error("更新用户资料失败");return this.transformUser(a)}catch(e){throw console.error("更新用户资料失败:",e),new Error("更新用户资料失败")}}static async createUserProfile(r,t){try{const e={id:r,email:t,role:"user",is_active:!0,email_verified:!1},{data:a,error:o}=await g.from("user_profiles").insert(e).select("*").single();if(o)throw o;if(!a)throw new Error("创建用户资料失败");return this.transformUser(a)}catch(e){throw console.error("创建用户资料失败:",e),new Error("创建用户资料失败")}}static async uploadAvatar(r,t){try{const e=t.name.split(".").pop(),a=`avatars/${`${r}-${Date.now()}.${e}`}`,{data:o}=await g.storage.from("avatars").list("",{search:r});if(o&&o.length>0){const r=o.map(r=>r.name);await g.storage.from("avatars").remove(r)}const{error:s}=await g.storage.from("avatars").upload(a,t);if(s)throw s;const{data:n}=g.storage.from("avatars").getPublicUrl(a);return n.publicUrl}catch(e){throw console.error("上传头像失败:",e),new Error("上传头像失败")}}static async updateLastLogin(r){try{const{error:t}=await g.from("user_profiles").update({last_login_at:(new Date).toISOString()}).eq("id",r);if(t)throw t}catch(t){console.error("更新最后登录时间失败:",t)}}static async checkUsernameAvailability(r,t){try{let e=g.from("user_profiles").select("id").eq("username",r);t&&(e=e.neq("id",t));const{data:a,error:o}=await e;if(o)throw o;return!a||0===a.length}catch(e){return console.error("检查用户名可用性失败:",e),!1}}static async getUserStats(r){try{const[t,e]=await Promise.all([g.from("favorites").select("tool_id, product_id").eq("user_id",r),g.from("orders").select("total_amount, status").eq("user_id",r)]),a=t.data||[],o=e.data||[],s=a.filter(r=>r.tool_id).length,n=a.filter(r=>r.product_id).length,i=o.length;return{favoriteToolsCount:s,favoriteProductsCount:n,ordersCount:i,totalSpent:o.filter(r=>"paid"===r.status).reduce((r,t)=>r+t.total_amount,0)}}catch(t){return console.error("获取用户统计信息失败:",t),{favoriteToolsCount:0,favoriteProductsCount:0,ordersCount:0,totalSpent:0}}}static async deleteAccount(r){try{await Promise.all([g.from("favorites").delete().eq("user_id",r),g.from("orders").delete().eq("user_id",r),g.from("user_profiles").delete().eq("id",r)]);const{error:t}=await g.auth.admin.deleteUser(r);if(t)throw t}catch(t){throw console.error("删除用户账户失败:",t),new Error("删除用户账户失败")}}static transformUser(r){return{id:r.id,email:r.email,username:r.username,fullName:r.full_name,avatarUrl:r.avatar_url,bio:r.bio,website:r.website,location:r.location,role:r.role,isActive:r.is_active,emailVerified:r.email_verified,createdAt:r.created_at,updatedAt:r.updated_at,lastLoginAt:r.last_login_at}}}class E{static async login(r){try{const{data:t,error:e}=await g.auth.signInWithPassword({email:r.email,password:r.password});if(e)throw e;if(!t.user)throw new Error("登录失败");await y.updateLastLogin(t.user.id);const a=await y.getCurrentUser();if(!a)throw new Error("获取用户信息失败");return{user:a,session:t.session}}catch(t){throw console.error("登录失败:",t),new Error(t instanceof Error?t.message:"登录失败")}}static async register(r){try{if(r.username){if(!(await y.checkUsernameAvailability(r.username)))throw new Error("用户名已被使用")}const{data:t,error:e}=await g.auth.signUp({email:r.email,password:r.password,options:{data:{full_name:r.fullName,username:r.username}}});if(e)throw e;if(!t.user)throw new Error("注册失败");const a=await y.createUserProfile(t.user.id,r.email);if(r.fullName||r.username){return{user:await y.updateProfile(t.user.id,{fullName:r.fullName,username:r.username}),session:t.session}}return{user:a,session:t.session}}catch(t){throw console.error("注册失败:",t),new Error(t instanceof Error?t.message:"注册失败")}}static async logout(){try{const{error:r}=await g.auth.signOut();if(r)throw r}catch(r){throw console.error("登出失败:",r),new Error("登出失败")}}static async forgotPassword(r){try{const{error:t}=await g.auth.resetPasswordForEmail(r,{redirectTo:`${window.location.origin}/auth/reset-password`});if(t)throw t}catch(t){throw console.error("发送重置密码邮件失败:",t),new Error("发送重置密码邮件失败")}}static async resetPassword(r){try{const{error:t}=await g.auth.updateUser({password:r});if(t)throw t}catch(t){throw console.error("重置密码失败:",t),new Error("重置密码失败")}}static async changePassword(r){try{const{error:t}=await g.auth.updateUser({password:r});if(t)throw t}catch(t){throw console.error("更改密码失败:",t),new Error("更改密码失败")}}static async updateEmail(r){try{const{error:t}=await g.auth.updateUser({email:r});if(t)throw t}catch(t){throw console.error("更新邮箱失败:",t),new Error("更新邮箱失败")}}static async verifyEmail(r,t){try{const{error:e}=await g.auth.verifyOtp({token_hash:r,type:t});if(e)throw e}catch(e){throw console.error("验证邮箱失败:",e),new Error("验证邮箱失败")}}static async resendVerificationEmail(){try{const{data:{user:r}}=await g.auth.getUser();if(!r)throw new Error("用户未登录");const{error:t}=await g.auth.resend({type:"signup",email:r.email});if(t)throw t}catch(r){throw console.error("重新发送验证邮件失败:",r),new Error("重新发送验证邮件失败")}}static async getSession(){try{const{data:{session:r}}=await g.auth.getSession();return r}catch(r){return console.error("获取会话失败:",r),null}}static async refreshSession(){try{const{data:r,error:t}=await g.auth.refreshSession();if(t)throw t;return r.session}catch(r){throw console.error("刷新会话失败:",r),new Error("刷新会话失败")}}static async isAuthenticated(){try{const{data:{user:r}}=await g.auth.getUser();return!!r}catch(r){return!1}}static onAuthStateChange(r){return g.auth.onAuthStateChange(r)}static async signInWithGoogle(){try{const{error:r}=await g.auth.signInWithOAuth({provider:"google",options:{redirectTo:`${window.location.origin}/auth/callback`}});if(r)throw r}catch(r){throw console.error("Google 登录失败:",r),new Error("Google 登录失败")}}static async signInWithGitHub(){try{const{error:r}=await g.auth.signInWithOAuth({provider:"github",options:{redirectTo:`${window.location.origin}/auth/callback`}});if(r)throw r}catch(r){throw console.error("GitHub 登录失败:",r),new Error("GitHub 登录失败")}}static async deleteAccount(){try{const{data:{user:r}}=await g.auth.getUser();if(!r)throw new Error("用户未登录");await y.deleteAccount(r.id)}catch(r){throw console.error("删除账户失败:",r),new Error("删除账户失败")}}}const U={class:"admin-view"},I={class:"admin-content"},b={class:"container"},A={class:"admin-layout"},P={class:"admin-nav"},S={class:"admin-main"};const C=_(r({__name:"AdminView",setup(r,{expose:u}){u();const d=p(),h=async()=>{try{const r=await y.getCurrentUser();if(!r||"admin"!==r.role&&"super_admin"!==r.role)return void d.push("/")}catch(r){console.error("检查管理员权限失败:",r),d.push("/auth/login")}};t(()=>{h()});const w={router:d,checkAdminAccess:h,handleLogout:async()=>{try{await E.logout(),d.push("/")}catch(r){console.error("退出登录失败:",r)}},get BarChart3Icon(){return l},get WrenchIcon(){return c},get ShoppingBagIcon(){return i},get UsersIcon(){return n},get FileTextIcon(){return s},get HardDriveIcon(){return o},get HomeIcon(){return a},get LogOutIcon(){return e}};return Object.defineProperty(w,"__isScriptSetup",{enumerable:!1,value:!0}),w}}),[["render",function(r,t,e,a,o,s){const n=u("router-link"),i=u("router-view");return v(),d("div",U,[t[9]||(t[9]=h("div",{class:"admin-header"},[h("div",{class:"container"},[h("h1",null,"管理后台"),h("p",null,"系统管理和数据统计")])],-1)),h("div",I,[h("div",b,[h("div",A,[h("nav",P,[w(n,{to:"/admin/dashboard",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.BarChart3Icon,{class:"nav-icon"}),t[0]||(t[0]=m(" 仪表盘 "))]),_:1,__:[0]}),w(n,{to:"/admin/tools",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.WrenchIcon,{class:"nav-icon"}),t[1]||(t[1]=m(" 工具管理 "))]),_:1,__:[1]}),w(n,{to:"/admin/products",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.ShoppingBagIcon,{class:"nav-icon"}),t[2]||(t[2]=m(" 产品管理 "))]),_:1,__:[2]}),w(n,{to:"/admin/users",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.UsersIcon,{class:"nav-icon"}),t[3]||(t[3]=m(" 用户管理 "))]),_:1,__:[3]}),w(n,{to:"/admin/orders",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.FileTextIcon,{class:"nav-icon"}),t[4]||(t[4]=m(" 订单管理 "))]),_:1,__:[4]}),w(n,{to:"/admin/local",class:"nav-item","active-class":"active"},{default:f(()=>[w(a.HardDriveIcon,{class:"nav-icon"}),t[5]||(t[5]=m(" 本地管理 "))]),_:1,__:[5]}),t[8]||(t[8]=h("div",{class:"nav-divider"},null,-1)),w(n,{to:"/",class:"nav-item"},{default:f(()=>[w(a.HomeIcon,{class:"nav-icon"}),t[6]||(t[6]=m(" 返回首页 "))]),_:1,__:[6]}),h("button",{class:"nav-item logout-btn",onClick:a.handleLogout},[w(a.LogOutIcon,{class:"nav-icon"}),t[7]||(t[7]=m(" 退出登录 "))])]),h("main",S,[w(i)])])])])])}],["__scopeId","data-v-40528339"],["__file","/mnt/persist/workspace/src/views/AdminView.vue"]]);export{C as default};
